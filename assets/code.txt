// Decompiled with JetBrains decompiler
// Type: Verse.GameConditionDef
// Assembly: Assembly-CSharp, Version=1.5.9214.33606, Culture=neutral, PublicKeyToken=null
// MVID: 630E2863-BC9A-4A34-93F2-EFF01E3A9556
// Assembly location: C:\Program Files (x86)\Steam\steamapps\common\RimWorld\RimWorldWin64_Data\Managed\Assembly-CSharp.dll

using RimWorld;
using System.Collections.Generic;

#nullable disable
namespace Verse;

public class GameConditionDef : Def
{
  public System.Type conditionClass = typeof (GameCondition);
  private List<GameConditionDef> exclusiveConditions;
  [MustTranslate]
  public string startMessage;
  [MustTranslate]
  public string endMessage;
  [MustTranslate]
  public string letterText;
  public List<ThingDef> letterHyperlinks;
  public LetterDef letterDef;
  public bool canBePermanent;
  public bool allowUnderground = true;
  [MustTranslate]
  public string descriptionFuture;
  [NoTranslate]
  public string jumpToSourceKey = "ClickToJumpToSource";
  public List<GameConditionDef> silencedByConditions;
  public bool natural = true;
  public bool preventNeutralVisitors;
  public bool preventIncidents;
  public bool displayOnUI = true;
  public bool pennedAnimalsSeekShelter;
  public PsychicDroneLevel defaultDroneLevel = PsychicDroneLevel.BadMedium;
  public bool preventRain;
  public WeatherDef weatherDef;
  public float temperatureOffset = -10f;
  public float minNearbyPollution;
  public SimpleCurve mtbOverNearbyPollutionCurve;

  public bool CanCoexistWith(GameConditionDef other)
  {
    if (this == other || ModsConfig.AnomalyActive && this != GameConditionDefOf.UnnaturalDarkness && other == GameConditionDefOf.UnnaturalDarkness)
      return false;
    return this.exclusiveConditions == null || !this.exclusiveConditions.Contains(other);
  }

  public static GameConditionDef Named(string defName)
  {
    return DefDatabase<GameConditionDef>.GetNamed(defName);
  }

  public override IEnumerable<string> ConfigErrors()
  {
    foreach (string configError in base.ConfigErrors())
      yield return configError;
    if (this.conditionClass == (System.Type) null)
      yield return "conditionClass is null";
  }
}

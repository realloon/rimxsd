<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <!-- Root -->
  <xs:element name="Defs">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="ThingDef" type="ThingDefType" />
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <!-- DefType -->
  <xs:complexType name="DefType" abstract="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="defName" type="xs:string">
        <xs:annotation>
          <xs:documentation>The name of this Def. It is used as an identifier by the game code.
            Default: "UnnamedDef"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="label" type="xs:string">
        <xs:annotation>
          <xs:documentation>The name of this Def. It is used as an identifier by the game code.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="description" type="xs:string">
        <xs:annotation>
          <xs:documentation>A human-readable description given when the Def is inspected by players.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="descriptionHyperlinks">
        <xs:complexType>
          <xs:sequence>
            <xs:any />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ignoreConfigErrors" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Disables config error checking. Intended for mod use. (Be careful!)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ignoreIllegalLabelCharacterConfigError" type="xs:boolean" />
      <xs:element name="modExtensions">
        <xs:annotation>
          <xs:documentation>Mod-specific data. Not used by core game code.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="li" type="DefModExtensionType" minOccurs="0" maxOccurs="unbounded" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="shortHash" type="xs:unsignedShort" />
      <xs:element name="index" type="xs:unsignedShort">
        <xs:annotation>
          <xs:documentation>Default: ushort.MaxValue</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="modContentPack" />
      <xs:element name="fileName" type="xs:string" />
      <xs:element name="generated" type="xs:boolean" />
      <xs:element name="debugRandomId" type="xs:unsignedShort">
        <xs:annotation>
          <xs:documentation>Default: (ushort) Rand.RangeInclusive(0, (int) ushort.MaxValue)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="ParentName" type="xs:string" />
  </xs:complexType>

  <!-- BuildableDefType -->
  <xs:complexType name="BuildableDefType" abstract="true">
    <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="statBases">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:any />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="passability" type="TraversabilityType" />
          <xs:element name="pathCost" type="xs:integer" />
          <xs:element name="pathCostIgnoreRepeat" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="fertility" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: -1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="costList" type="GeneralAnyListType" />
          <xs:element name="costStuffCount" type="xs:integer" />
          <xs:element name="stuffCategories">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <!-- StuffCategoryDefType -->
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="stuffCategorySummary" type="xs:string" />
          <xs:element name="costListForDifficulty" type="CostListForDifficultyType" />
          <xs:element name="placingDraggableDimensions" type="xs:integer" />
          <xs:element name="clearBuildingArea" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultPlacingRot" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: Rot4.North</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="resourcesFractionWhenDeconstructed" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 0.5f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="blocksAltitudes">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="AltitudeLayerType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="dominantStyleCategory" type="xs:string" />
          <xs:element name="isAltar" type="xs:boolean" />
          <xs:element name="useStuffTerrainAffordance" type="xs:boolean" />
          <xs:element name="terrainAffordanceNeeded" type="xs:string" />
          <xs:element name="buildingPrerequisites">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="researchPrerequisites">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="ResearchProjectDefType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="minMonolithLevel" type="xs:integer" />
          <xs:element name="constructionSkillPrerequisite" type="xs:integer" />
          <xs:element name="artisticSkillPrerequisite" type="xs:integer" />
          <xs:element name="minTechLevelToBuild" type="TechLevelType" />
          <xs:element name="maxTechLevelToBuild" type="TechLevelType" />
          <xs:element name="altitudeLayer" type="AltitudeLayerType">
            <xs:annotation>
              <xs:documentation>Default: AltitudeLayer.Item</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="repairEffect" type="EffecterDefType" />
          <xs:element name="constructEffect" type="EffecterDefType" />
          <xs:element name="colorPerStuff">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="ColorForStuffType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="canGenerateDefaultDesignator" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ideoBuilding" type="xs:boolean" />
          <xs:element name="specialDisplayRadius" type="xs:float" />
          <xs:element name="placeWorkers">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="designationCategory" type="xs:string" />
          <xs:element name="designatorDropdown" type="xs:string" />
          <xs:element name="designationHotKey" type="xs:string" />
          <xs:element name="uiOrder" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 2999f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="uiIconPath" type="xs:string" />
          <xs:element name="uiIconPathsStuff">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="IconForStuffAppearanceType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="uiIconOffset" type="xs:string" />
          <xs:element name="uiIconColor" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: Color.white</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="uiIconForStackCount" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: -1</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="blueprintDef" type="xs:string" />
          <xs:element name="installBlueprintDef" type="xs:string" />
          <xs:element name="frameDef" type="xs:string" />
          <xs:element name="graphic" type="GraphicType">
            <xs:annotation>
              <xs:documentation>Default: BaseContent.BadGraphic</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="uiIcon">
            <xs:annotation>
              <xs:documentation>Default: BaseContent.BadTex</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="uiIconAngle" type="xs:float" />
          <xs:element name="MadeFromStuff" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: &gt;
                !this.stuffCategories.NullOrEmpty&lt;StuffCategoryDef&gt;()</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="BuildableByPlayer" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.designationCategory != null</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="DrawMatSingle">
            <xs:annotation>
              <xs:documentation>Default: this.graphic?.MatSingle</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Altitude" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: this.altitudeLayer.AltitudeFor()</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="AffectsFertility" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: (double) this.fertility &gt;= 0.0</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- ThingDefType -->
  <xs:complexType name="ThingDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's ThingDef type.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BuildableDefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="thingClass" type="xs:string" />
          <xs:element name="category" type="ThingCategoryType" />
          <xs:element name="tickerType" type="TickerTypeType" />
          <xs:element name="stackLimit" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: 1</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="size" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: IntVec2.One</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="destroyable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="rotatable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="smallVolume" type="xs:boolean" />
          <xs:element name="useHitPoints" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="receivesSignals" type="xs:boolean" />
          <xs:element name="comps">
            <xs:annotation>
              <xs:documentation>Default: new List&lt;CompProperties&gt;()</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="CompPropertiesType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="virtualDefs">
            <xs:annotation>
              <xs:documentation>Default: new List&lt;ThingDef&gt;()</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="virtualDefParent" type="xs:string" />
          <xs:element name="devNote" type="xs:string" />
          <!-- <xs:element name="killedLeavingsRanges">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="ThingDefCountRangeClassType" minOccurs="0"
              maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element> -->
          <xs:element name="killedLeavings">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:any />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <!-- <xs:element name="killedLeavingsPlayerHostile">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="ThingDefCountClassType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element> -->
          <xs:element name="killedLeavingsChance" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="forceLeavingsAllowed" type="xs:boolean" />
          <xs:element name="butcherProducts">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:any />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="smeltProducts">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:any />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="smeltable" type="xs:boolean" />
          <xs:element name="burnableByRecipe" type="xs:boolean" />
          <xs:element name="randomizeRotationOnSpawn" type="xs:boolean" />
          <xs:element name="damageMultipliers">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="DamageMultiplierType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="isTechHediff" type="xs:boolean" />
          <xs:element name="recipeMaker" type="RecipeMakerPropertiesType" />
          <xs:element name="minifiedDef" type="xs:string" />
          <xs:element name="isUnfinishedThing" type="xs:boolean" />
          <xs:element name="leaveResourcesWhenKilled" type="xs:boolean" />
          <xs:element name="slagDef" type="xs:string" />
          <xs:element name="isFrameInt" type="xs:boolean" />
          <xs:element name="multipleInteractionCellOffsets">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="interactionCellOffset" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: IntVec3.Zero</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasInteractionCell" type="xs:boolean" />
          <xs:element name="interactionCellIcon" type="xs:string" />
          <xs:element name="interactionCellIconReverse" type="xs:boolean" />
          <xs:element name="filthLeaving" type="xs:string" />
          <xs:element name="forceDebugSpawnable" type="xs:boolean" />
          <xs:element name="intricate" type="xs:boolean" />
          <xs:element name="scatterableOnMapGen" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="deepCommonality" type="xs:float" />
          <xs:element name="deepCountPerCell" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: 300</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="deepCountPerPortion" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: -1</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="deepLumpSizeRange" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: IntRange.zero</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="generateCommonality" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="generateAllowChance" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="startingHpRange" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: FloatRange.One</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="thingSetMakerTags">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="alwaysFlee" type="xs:boolean" />
          <xs:element name="recipes">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="RecipeDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="messageOnDeteriorateInStorage" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="deteriorateFromEnvironmentalEffects" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="canDeteriorateUnspawned" type="xs:boolean" />
          <xs:element name="canLoadIntoCaravan" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="isMechClusterThreat" type="xs:boolean" />
          <xs:element name="displayNumbersBetweenSameDefDistRange" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: FloatRange.Zero</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="minRewardCount" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: 1</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="preventSkyfallersLandingOn" type="xs:boolean" />
          <xs:element name="requiresFactionToAcquire" type="FactionDefType" />
          <xs:element name="relicChance" type="xs:float" />
          <xs:element name="orderedTakeGroup" type="xs:string" />
          <xs:element name="allowedArchonexusCount" type="xs:integer" />
          <xs:element name="possessionCount" type="xs:integer" />
          <xs:element name="notifyMapRemoved" type="xs:boolean" />
          <xs:element name="canScatterOver" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="genericMarketSellable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="drawHighlight" type="xs:boolean" />
          <xs:element name="autoTargetNearbyIdenticalThings" type="xs:boolean" />
          <xs:element name="preventDroppingThingsOn" type="xs:boolean" />
          <xs:element name="hiddenWhileUndiscovered" type="xs:boolean" />
          <xs:element name="disableImpassableShotOverConfigError" type="xs:boolean" />
          <xs:element name="showInSearch" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="graphicData" type="GraphicDataType" />
          <xs:element name="drawerType" type="DrawerTypeType">
            <xs:annotation>
              <xs:documentation>Default: DrawerType.RealtimeOnly</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="drawOffscreen" type="xs:boolean" />
          <xs:element name="colorGenerator">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:any><!-- TODO:  -->
                </xs:any>
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="hideAtSnowDepth" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 99999f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="drawDamagedOverlay" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="castEdgeShadows" type="xs:boolean" />
          <xs:element name="staticSunShadowHeight" type="xs:float" />
          <xs:element name="useSameGraphicForGhost" type="xs:boolean" />
          <xs:element name="useBlueprintGraphicAsGhost" type="xs:boolean" />
          <xs:element name="randomStyle">
            <!-- <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="ThingStyleChanceType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType> -->
          </xs:element>
          <xs:element name="randomStyleChance" type="xs:float" />
          <xs:element name="canEditAnyStyle" type="xs:boolean" />
          <xs:element name="defaultStuff" type="xs:string" />
          <xs:element name="killedLeavingsExpandRect" type="xs:integer" />
          <xs:element name="minifiedDrawScale" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="overrideMinifiedRot" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: Rot4.Invalid</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="minifiedDrawOffset" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: Vector3.zero</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="deselectedSelectionBracketFactor" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="selectable" type="xs:boolean" />
          <xs:element name="containedPawnsSelectable" type="xs:boolean" />
          <xs:element name="containedItemsSelectable" type="xs:boolean" />
          <xs:element name="neverMultiSelect" type="xs:boolean" />
          <xs:element name="isAutoAttackableMapObject" type="xs:boolean" />
          <xs:element name="hasTooltip" type="xs:boolean" />
          <xs:element name="inspectorTabs">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="inspectorTabsResolved">
            <!-- <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="InspectTabBaseType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType> -->
          </xs:element>
          <xs:element name="seeThroughFog" type="xs:boolean" />
          <xs:element name="drawGUIOverlay" type="xs:boolean" />
          <xs:element name="drawGUIOverlayQuality" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="resourceReadoutPriority" type="ResourceCountPriorityType" />
          <xs:element name="resourceReadoutAlwaysShow" type="xs:boolean" />
          <xs:element name="drawPlaceWorkersWhileSelected" type="xs:boolean" />
          <xs:element name="drawPlaceWorkersWhileInstallBlueprintSelected" type="xs:boolean" />
          <xs:element name="storedConceptLearnOpportunity" type="xs:string" />
          <xs:element name="uiIconScale" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasCustomRectForSelector" type="xs:boolean" />
          <xs:element name="hideStats" type="xs:boolean" />
          <xs:element name="hideInspect" type="xs:boolean" />
          <xs:element name="onlyShowInspectString" type="xs:boolean" />
          <xs:element name="hideMainDesc" type="xs:boolean" />
          <xs:element name="alwaysHaulable" type="xs:boolean" />
          <xs:element name="designateHaulable" type="xs:boolean" />
          <xs:element name="thingCategories">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="mineable" type="xs:boolean" />
          <xs:element name="socialPropernessMatters" type="xs:boolean" />
          <xs:element name="stealable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="soundSpawned" type="SoundDefType" />
          <xs:element name="soundDrop" type="SoundDefType" />
          <xs:element name="soundPickup" type="SoundDefType" />
          <xs:element name="soundInteract" type="SoundDefType" />
          <xs:element name="soundImpactDefault" type="SoundDefType" />
          <xs:element name="soundPlayInstrument" type="SoundDefType" />
          <xs:element name="soundOpen" type="SoundDefType" />
          <xs:element name="saveCompressible" type="xs:boolean" />
          <xs:element name="isSaveable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="holdsRoof" type="xs:boolean" />
          <xs:element name="fillPercent" type="xs:float" />
          <xs:element name="coversFloor" type="xs:boolean" />
          <xs:element name="neverOverlapFloors" type="xs:boolean" />
          <xs:element name="surfaceType" type="SurfaceTypeType" />
          <xs:element name="wipesPlants" type="xs:boolean" />
          <xs:element name="blockPlants" type="xs:boolean" />
          <xs:element name="blockLight" type="xs:boolean" />
          <xs:element name="blockWind" type="xs:boolean" />
          <xs:element name="blockWeather" type="xs:boolean" />
          <xs:element name="tradeability" type="TradeabilityType">
            <xs:annotation>
              <xs:documentation>Default: Tradeability.All</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="tradeTags">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="tradeNeverStack" type="xs:boolean" />
          <xs:element name="tradeNeverGenerateStacked" type="xs:boolean" />
          <xs:element name="healthAffectsPrice" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="colorGeneratorInTraderStock">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:any></xs:any>
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="tools">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="ToolType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="equippedAngleOffset" type="xs:float" />
          <xs:element name="equippedDistanceOffset" type="xs:float" />
          <xs:element name="equipmentType" type="EquipmentTypeType" />
          <xs:element name="techLevel" type="TechLevelType" />
          <xs:element name="weaponClasses">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="weaponTags">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="techHediffsTags">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="violentTechHediff" type="xs:boolean" />
          <xs:element name="destroyOnDrop" type="xs:boolean" />
          <xs:element name="equippedStatOffsets" type="GeneralAnyListType" />
          <xs:element name="meleeHitSound" type="SoundDefType" />
          <xs:element name="recoilPower" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="recoilRelaxation" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 10f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="rotateInShelves" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="mergeVerbGizmos" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="entityDefToBuild" type="BuildableDefType" />
          <xs:element name="projectileWhenLoaded" type="xs:string" />
          <xs:element name="ideoBuildingNamerBase" type="RulePackDefType" />
          <xs:element name="entityCodexEntry" type="EntityCodexEntryDefType" />
          <xs:element name="ingestible" type="IngestiblePropertiesType" />
          <xs:element name="filth" type="FilthPropertiesType" />
          <xs:element name="gas" type="xs:string" />
          <xs:element name="building" type="BuildingPropertiesType" />
          <xs:element name="race" type="RacePropertiesType" />
          <xs:element name="apparel" type="ApparelPropertiesType" />
          <xs:element name="mote" type="MotePropertiesType" />
          <xs:element name="plant" type="PlantPropertiesType" />
          <xs:element name="projectile" type="ProjectilePropertiesType" />
          <xs:element name="stuffProps" type="StuffPropertiesType" />
          <xs:element name="skyfaller" type="SkyfallerPropertiesType" />
          <xs:element name="pawnFlyer" type="PawnFlyerPropertiesType" />
          <xs:element name="ritualFocus" type="RitualFocusPropertiesType" />
          <xs:element name="ingredient" type="IngredientPropertiesType" />
          <xs:element name="canBeUsedUnderRoof" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="interactionCellGraphic" type="GraphicType" />
          <xs:element name="EverHaulable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.alwaysHaulable || this.designateHaulable</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="EverPollutable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: !this.building.isNaturalRock</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="VolumePerUnit" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: this.smallVolume ? 0.1f : 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="DiscardOnDestroyed" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.race == null</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="BaseFlammability" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: this.GetStatValueAbstract(StatDefOf.Flammability)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="BaseMass" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: this.GetStatValueAbstract(StatDefOf.Mass)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Minifiable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.minifiedDef != null</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="HasThingIDNumber" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.category != ThingCategory.Mote</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="CoexistsWithFloors" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: !this.neverOverlapFloors &amp;&amp; !this.coversFloor</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="MakeFog" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.Fillage == FillCategory.Full</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="CountAsResource" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.resourceReadoutPriority != 0</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsApparel" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.apparel != null</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsBed" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: typeof (Building_Bed).IsAssignableFrom(this.thingClass)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsCorpse" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: typeof (Corpse).IsAssignableFrom(this.thingClass)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsFrame" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.isFrameInt</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsStuff" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.stuffProps != null</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsMedicine" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: &gt;
                this.statBases.StatListContains(StatDefOf.MedicalPotency)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsDoor" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: typeof (Building_Door).IsAssignableFrom(this.thingClass)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsFence" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.building != null &amp;&amp; this.building.isFence</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsFilth" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.filth != null</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsIngestible" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.ingestible != null</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsCommsConsole" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: typeof
                (Building_CommsConsole).IsAssignableFrom(this.thingClass)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsDrug" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.ingestible != null &amp;&amp;
                this.ingestible.drugCategory != 0</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsPleasureDrug" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.IsDrug &amp;&amp; (double) this.ingestible.joy 0.0</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsWorkTable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: typeof
                (Building_WorkTable).IsAssignableFrom(this.thingClass)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsShell" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.projectileWhenLoaded != null</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsArt" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.IsWithinCategory(ThingCategoryDefOf.BuildingsArt)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsSmoothable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.building?.smoothedThing != null</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsSmoothed" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.building?.unsmoothedThing != null</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsGibbetCage" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: typeof
                (Building_GibbetCage).IsAssignableFrom(this.thingClass)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsMechGestator" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: typeof
                (Building_MechGestator).IsAssignableFrom(this.thingClass)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsMechRecharger" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: typeof
                (Building_MechCharger).IsAssignableFrom(this.thingClass)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsMeleeWeapon" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.IsWeapon &amp;&amp; !this.IsRangedWeapon</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="CanAffectLinker" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.graphicData != null &amp;&amp; this.graphicData.Linked
                || this.IsDoor</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsPlant" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: typeof (Plant).IsAssignableFrom(this.thingClass)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsStudiable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.HasAssignableCompFrom(typeof (CompStudiable))</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- ThingCategoryType -->
  <xs:simpleType name="ThingCategoryType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for ThingCategory.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Pawn" />
      <xs:enumeration value="Item" />
      <xs:enumeration value="Building" />
      <xs:enumeration value="Plant" />
      <xs:enumeration value="Projectile" />
      <xs:enumeration value="Filth" />
      <xs:enumeration value="Gas" />
      <xs:enumeration value="Attachment" />
      <xs:enumeration value="Mote" />
      <xs:enumeration value="Ethereal" />
      <xs:enumeration value="PsychicEmitter" />
    </xs:restriction>
  </xs:simpleType>

  <!-- TickerTypeType -->
  <xs:simpleType name="TickerTypeType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for TickerType.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Never" />
      <xs:enumeration value="Normal" />
      <xs:enumeration value="Rare" />
      <xs:enumeration value="Long" />
    </xs:restriction>
  </xs:simpleType>

  <!-- CompPropertiesType -->
  <xs:complexType name="CompPropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's CompProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="compClass" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: typeof (ThingComp)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- DamageMultiplierType -->
  <xs:complexType name="DamageMultiplierType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's DamageMultiplier type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="damageDef" type="DamageDefType" />
      <xs:element name="multiplier" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- DamageDefType -->
  <xs:complexType name="DamageDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's DamageDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="workerClass" type="System.TypeType">
            <xs:annotation>
              <xs:documentation>Default: typeof (DamageWorker)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasForcefulImpact" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="harmsHealth" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="makesBlood" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="canInterruptJobs" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="isRanged" type="xs:boolean" />
          <xs:element name="makesAnimalsFlee" type="xs:boolean" />
          <xs:element name="execution" type="xs:boolean" />
          <xs:element name="combatLogRules" type="RulePackDefType" />
          <xs:element name="buildingDamageFactor" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="buildingDamageFactorPassable" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="buildingDamageFactorImpassable" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="plantDamageFactor" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="corpseDamageFactor" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="causeStun" type="xs:boolean" />
          <xs:element name="stunAdaptationTicks" type="xs:integer" />
          <xs:element name="stunResistStat" type="StatDefType" />
          <xs:element name="displayAdaptedTextMote" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="adaptedText" type="xs:string" />
          <xs:element name="canUseDeflectMetalEffect" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="impactSoundType" type="ImpactSoundTypeDefType" />
          <xs:element name="deathMessage" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: "{0} has been killed."</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="damageEffecter" type="EffecterDefType" />
          <xs:element name="defaultDamage" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: -1</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultArmorPenetration" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: -1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultStoppingPower" type="xs:float" />
          <xs:element name="additionalHediffs">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="DamageDefAdditionalHediffType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="applyAdditionalHediffsIfHuntingForFood" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="armorCategory" type="DamageArmorCategoryDefType" />
          <xs:element name="minDamageToFragment" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: 99999</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="overkillPctToDestroyPart" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: new FloatRange(0.0f, 0.7f)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="consideredHelpful" type="xs:boolean" />
          <xs:element name="harmAllLayersUntilOutside" type="xs:boolean" />
          <xs:element name="hediff" type="HediffDefType" />
          <xs:element name="hediffSkin" type="HediffDefType" />
          <xs:element name="hediffSolid" type="HediffDefType" />
          <xs:element name="isExplosive" type="xs:boolean" />
          <xs:element name="explosionSnowMeltAmount" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="explosionAffectOutsidePartsOnly" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="explosionCellMote" type="xs:string" />
          <xs:element name="explosionCellFleck" type="FleckDefType" />
          <xs:element name="explosionColorCenter" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: Color.white</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="explosionColorEdge" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: Color.white</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="explosionInteriorEffecter" type="EffecterDefType" />
          <xs:element name="explosionInteriorMote" type="xs:string" />
          <xs:element name="explosionInteriorFleck" type="FleckDefType" />
          <xs:element name="explosionCenterMote" type="xs:string" />
          <xs:element name="explosionCenterFleck" type="FleckDefType" />
          <xs:element name="explosionCenterEffecter" type="EffecterDefType" />
          <xs:element name="explosionCellEffecter" type="EffecterDefType" />
          <xs:element name="explosionCellEffecterChance" type="xs:float" />
          <xs:element name="explosionCellEffecterMaxRadius" type="xs:float" />
          <xs:element name="explosionHeatEnergyPerCell" type="xs:float" />
          <xs:element name="expolosionPropagationSpeed" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="soundExplosion" type="SoundDefType" />
          <xs:element name="explosionInteriorCellCountMultiplier" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="explosionInteriorCellDistanceMultiplier" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 0.7f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stabChanceOfForcedInternal" type="xs:float" />
          <xs:element name="cutExtraTargetsCurve" type="SimpleCurveType" />
          <xs:element name="cutCleaveBonus" type="xs:float" />
          <xs:element name="bluntInnerHitChance" type="xs:float" />
          <xs:element name="bluntInnerHitDamageFractionToConvert" type="xs:string" />
          <xs:element name="bluntInnerHitDamageFractionToAdd" type="xs:string" />
          <xs:element name="bluntStunDuration" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="bluntStunChancePerDamagePctOfCorePartToHeadCurve"
            type="SimpleCurveType" />
          <xs:element name="bluntStunChancePerDamagePctOfCorePartToBodyCurve"
            type="SimpleCurveType" />
          <xs:element name="scratchSplitPercentage" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 0.5f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="scaleDamageToBuildingsBasedOnFlammability" type="xs:boolean" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>

  <!-- RecipeMakerPropertiesType -->
  <xs:complexType name="RecipeMakerPropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's RecipeMakerProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="label" type="xs:string" />
      <xs:element name="productCount" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 1</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="targetCountAdjustment" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 1</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="bulkRecipeCount" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: -1</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="useIngredientsForColor" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="workAmount" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: -1</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="workSpeedStat" type="xs:string" />
      <xs:element name="efficiencyStat" type="xs:string" />
      <xs:element name="unfinishedThingDef" type="xs:string" />
      <xs:element name="defaultIngredientFilter" type="xs:string" />
      <xs:element name="skillRequirements">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="SkillRequirementType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="workSkill" type="xs:string" />
      <xs:element name="workSkillLearnPerTick" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="requiredGiverWorkType" type="xs:string" />
      <xs:element name="effectWorking" type="xs:string" />
      <xs:element name="soundWorking" type="xs:string" />
      <xs:element name="recipeUsers">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="researchPrerequisite" type="ResearchProjectDefType" />
      <xs:element name="memePrerequisitesAny">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="researchPrerequisites">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="ResearchProjectDefType" minOccurs="0"
              maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="factionPrerequisiteTags">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="mechanitorOnlyRecipe" type="xs:boolean" />
      <xs:element name="fromIdeoBuildingPreceptOnly" type="xs:boolean" />
      <xs:element name="displayPriority" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 99999</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>


  <!-- RecipeDefType -->
  <xs:complexType name="RecipeDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's RecipeDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="workerClass" type="System.TypeType">
            <xs:annotation>
              <xs:documentation>Default: typeof (RecipeWorker)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="workerCounterClass" type="System.TypeType">
            <xs:annotation>
              <xs:documentation>Default: typeof (RecipeWorkerCounter)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobString" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: "Doing an unknown recipe."</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="requiredGiverWorkType" type="WorkTypeDefType" />
          <xs:element name="workAmount" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: -1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="workSpeedStat" type="StatDefType" />
          <xs:element name="efficiencyStat" type="StatDefType" />
          <xs:element name="workTableEfficiencyStat" type="StatDefType" />
          <xs:element name="workTableSpeedStat" type="StatDefType" />
          <xs:element name="ingredients">
            <xs:annotation>
              <xs:documentation>Default: new List&lt;IngredientCount&gt;()</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="IngredientCountType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="fixedIngredientFilter" type="ThingFilterType">
            <xs:annotation>
              <xs:documentation>Default: new ThingFilter()</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultIngredientFilter" type="ThingFilterType" />
          <xs:element name="allowMixingIngredients" type="xs:boolean" />
          <xs:element name="ignoreIngredientCountTakeEntireStacks" type="xs:boolean" />
          <xs:element name="forceHiddenSpecialFilters">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="SpecialThingFilterDefType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="autoStripCorpses" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="interruptIfIngredientIsRotting" type="xs:boolean" />
          <xs:element name="products">
            <xs:annotation>
              <xs:documentation>Default: new List&lt;ThingDefCountClass&gt;()</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="ThingDefCountClassType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="specialProducts">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="SpecialProductTypeType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="productHasIngredientStuff" type="xs:boolean" />
          <xs:element name="useIngredientsForColor" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="targetCountAdjustment" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: 1</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="unfinishedThingDef" type="xs:string" />
          <xs:element name="skillRequirements">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="SkillRequirementType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="workSkill" type="SkillDefType" />
          <xs:element name="workSkillLearnFactor" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="effectWorking" type="EffecterDefType" />
          <xs:element name="soundWorking" type="SoundDefType" />
          <xs:element name="successfullyRemovedHediffMessage" type="xs:string" />
          <xs:element name="surgerySuccessChanceFactor" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="deathOnFailedSurgeryChance" type="xs:float" />
          <xs:element name="targetsBodyPart" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="anesthetize" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="minPartCount" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: -1</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="surgeryIgnoreEnvironment" type="xs:boolean" />
          <xs:element name="surgeryOutcomeEffect" type="SurgeryOutcomeEffectDefType" />
          <xs:element name="mustBeFertile" type="xs:boolean" />
          <xs:element name="allowedForQuestLodgers" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="minAllowedAge" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: -1</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="humanlikeOnly" type="xs:boolean" />
          <xs:element name="mutantPrerequisite">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="MutantDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="mutantBlacklist">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="MutantDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="smeltingWorkAmount" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: -1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="researchPrerequisite" type="ResearchProjectDefType" />
          <xs:element name="memePrerequisitesAny">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="MemeDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="researchPrerequisites">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="ResearchProjectDefType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="factionPrerequisiteTags">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="fromIdeoBuildingPreceptOnly" type="xs:boolean" />
          <xs:element name="conceptLearned" type="ConceptDefType" />
          <xs:element name="dontShowIfAnyIngredientMissing" type="xs:boolean" />
          <xs:element name="displayPriority" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: 99999</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="formingTicks" type="xs:integer" />
          <xs:element name="mechanitorOnlyRecipe" type="xs:boolean" />
          <xs:element name="gestationCycles" type="xs:integer" />
          <xs:element name="mechResurrection" type="xs:boolean" />
          <xs:element name="regenerateOnDifficultyChange" type="xs:boolean" />
          <xs:element name="adjustedCount" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: 1</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="UIIconThing" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: this.uiIconThing ?? this.ProducedThingDef</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="UsesUnfinishedThing" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.unfinishedThingDef != null</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>


  <!-- FactionDefType -->
  <xs:complexType name="FactionDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's FactionDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="isPlayer" type="xs:boolean" />
          <xs:element name="factionNameMaker" type="RulePackDefType" />
          <xs:element name="settlementNameMaker" type="RulePackDefType" />
          <xs:element name="playerInitialSettlementNameMaker" type="RulePackDefType" />
          <xs:element name="fixedName" type="xs:string" />
          <xs:element name="humanlikeFaction" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hidden" type="xs:boolean" />
          <xs:element name="listOrderPriority" type="xs:float" />
          <xs:element name="pawnGroupMakers">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="PawnGroupMakerType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="raidCommonalityFromPointsCurve" type="SimpleCurveType" />
          <xs:element name="autoFlee" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="attackersDownPercentageRangeForAutoFlee" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: new FloatRange(0.4f, 0.7f)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="canSiege" type="xs:boolean" />
          <xs:element name="canStageAttacks" type="xs:boolean" />
          <xs:element name="canUseAvoidGrid" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="canPsychicRitualSiege" type="xs:boolean" />
          <xs:element name="earliestRaidDays" type="xs:float" />
          <xs:element name="allowedArrivalTemperatureRange" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: new FloatRange(-1000f, 1000f)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="minSettlementTemperatureChanceCurve" type="SimpleCurveType" />
          <xs:element name="basicMemberKind" type="PawnKindDefType" />
          <xs:element name="startingResearchTags">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="ResearchProjectTagDefType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="startingTechprintsResearchTags">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="ResearchProjectTagDefType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="recipePrerequisiteTags">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="rescueesCanJoin" type="xs:boolean" />
          <xs:element name="pawnSingular" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: "member"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="pawnsPlural" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: "members"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="leaderTitle" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: "leader"</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="leaderTitleFemale" type="xs:string" />
          <xs:element name="royalFavorLabel" type="xs:string" />
          <xs:element name="royalFavorIconPath" type="xs:string" />
          <xs:element name="fixedLeaderKinds">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="PawnKindDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="leaderForceGenerateNewPawn" type="xs:boolean" />
          <xs:element name="forageabilityFactor" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="maxPawnCostPerTotalPointsCurve" type="SimpleCurveType" />
          <xs:element name="royalTitleTags">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="categoryTag" type="xs:string" />
          <xs:element name="hostileToFactionlessHumanlikes" type="xs:boolean" />
          <xs:element name="dropPodActive" type="xs:string" />
          <xs:element name="dropPodIncoming" type="xs:string" />
          <xs:element name="raidsForbidden" type="xs:boolean" />
          <xs:element name="requiredCountAtGameStart" type="xs:integer" />
          <xs:element name="settlementGenerationWeight" type="xs:float" />
          <xs:element name="generateNewLeaderFromMapMembersOnly" type="xs:boolean" />
          <xs:element name="maxConfigurableAtWorldCreation" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: -1</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="startingCountAtWorldCreation" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: 1</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="configurationListOrderPriority" type="xs:integer" />
          <xs:element name="replacesFaction" type="FactionDefType" />
          <xs:element name="displayInFactionSelection" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="techLevel" type="TechLevelType" />
          <xs:element name="backstoryFilters">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="BackstoryCategoryFilterType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="settlementTexturePath" type="xs:string" />
          <xs:element name="factionIconPath" type="xs:string" />
          <xs:element name="colorSpectrum">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="royalTitleInheritanceRelations">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="PawnRelationDefType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="royalTitleInheritanceWorkerClass" type="System.TypeType" />
          <xs:element name="royalImplantRules">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="RoyalImplantRuleType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="renounceTitleMessage" type="xs:string" />
          <xs:element name="allowedCultures">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="CultureDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="requiredMemes">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="MemeDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="allowedMemes">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="MemeDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="disallowedMemes">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="MemeDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="disallowedPrecepts">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="PreceptDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="structureMemeWeights">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="MemeWeightType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="classicIdeo" type="xs:boolean" />
          <xs:element name="fixedIdeo" type="xs:boolean" />
          <xs:element name="ideoName" type="xs:string" />
          <xs:element name="hiddenIdeo" type="xs:boolean" />
          <xs:element name="ideoDescription" type="xs:string" />
          <xs:element name="styles">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="StyleCategoryDefType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="deityPresets">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="DeityPresetType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="forcedMemes">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="MemeDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="requiredPreceptsOnly" type="xs:boolean" />
          <xs:element name="maxCountAtGameStart" type="xs:integer" />
          <xs:element name="canMakeRandomly" type="xs:boolean" />
          <xs:element name="dialogFactionGreetingHostile" type="xs:string" />
          <xs:element name="dialogFactionGreetingHostileAppreciative" type="xs:string" />
          <xs:element name="dialogFactionGreetingWary" type="xs:string" />
          <xs:element name="dialogFactionGreetingWarm" type="xs:string" />
          <xs:element name="dialogMilitaryAidSent" type="xs:string" />
          <xs:element name="CanEverBeNonHostile" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: !this.permanentEnemy</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="HasRoyalTitles" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: &gt;
                this.RoyalTitlesAwardableInSeniorityOrderForReading.Count 0</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="BaselinerChance" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: this.xenotypeSet != null ?
                this.xenotypeSet.BaselinerChance : 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>

  <!-- GraphicDataType -->
  <xs:complexType name="GraphicDataType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's GraphicData type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="name" type="xs:string" />
      <xs:element name="texPath" type="xs:string" />
      <xs:element name="maskPath" type="xs:string" />
      <xs:element name="graphicClass" type="xs:string" />
      <xs:element name="shaderType" type="xs:string" />
      <xs:element name="shaderParameters">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:any />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="color" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Color.white</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="colorTwo" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Color.white</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="drawSize" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Vector2.one</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="drawOffset" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Vector3.zero</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="onGroundRandomRotateAngle" type="xs:float" />
      <xs:element name="drawRotated" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="allowFlip" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="flipExtraRotation" type="xs:float" />
      <xs:element name="renderInstanced" type="xs:boolean" />
      <xs:element name="allowAtlasing" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="renderQueue" type="xs:integer" />
      <xs:element name="overlayOpacity" type="xs:float" />
      <xs:element name="attachments">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="GraphicDataType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="attachPoints">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="AttachPointType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="addTopAltitudeBias" type="xs:boolean" />
      <xs:element name="ignoreThingDrawColor" type="xs:boolean" />
      <xs:element name="maxSnS" type="xs:string" />
      <xs:element name="offsetSnS" type="xs:string" />
      <xs:element name="shadowData" type="ShadowDataType" />
      <xs:element name="damageData" type="DamageGraphicDataType" />
      <xs:element name="linkType" type="LinkDrawerTypeType" />
      <xs:element name="linkFlags" type="LinkFlagsType" />
      <xs:element name="asymmetricLink" type="AsymmetricLinkDataType" />
      <xs:element name="cornerOverlayPath" type="xs:string" />
      <xs:element name="Linked" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.linkType != 0</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- AttachPointType -->
  <xs:complexType name="AttachPointType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's AttachPoint type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="offset" type="xs:string" />
      <xs:element name="type" type="xs:string" />
    </xs:choice>
  </xs:complexType>

  <!-- DamageGraphicDataType -->
  <xs:complexType name="DamageGraphicDataType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's DamageGraphicData type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="enabled" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="rectN" type="xs:string" />
      <xs:element name="rectE" type="xs:string" />
      <xs:element name="rectS" type="xs:string" />
      <xs:element name="rectW" type="xs:string" />
      <xs:element name="rect" type="xs:string" />
      <xs:element name="scratches">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="cornerTL" type="xs:string" />
      <xs:element name="cornerTR" type="xs:string" />
      <xs:element name="cornerBL" type="xs:string" />
      <xs:element name="cornerBR" type="xs:string" />
      <xs:element name="edgeLeft" type="xs:string" />
      <xs:element name="edgeRight" type="xs:string" />
      <xs:element name="edgeTop" type="xs:string" />
      <xs:element name="edgeBot" type="xs:string" />
      <xs:element name="scratchMats">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="cornerTLMat" type="xs:string" />
      <xs:element name="cornerTRMat" type="xs:string" />
      <xs:element name="cornerBLMat" type="xs:string" />
      <xs:element name="cornerBRMat" type="xs:string" />
      <xs:element name="edgeLeftMat" type="xs:string" />
      <xs:element name="edgeRightMat" type="xs:string" />
      <xs:element name="edgeTopMat" type="xs:string" />
      <xs:element name="edgeBotMat" type="xs:string" />
    </xs:choice>
  </xs:complexType>

  <!-- ShadowDataType -->
  <xs:complexType name="ShadowDataType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's ShadowData type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="volume" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Vector3.one</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="offset" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Vector3.zero</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="BaseX" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: this.volume.x</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="BaseY" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: this.volume.y</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="BaseZ" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: this.volume.z</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- LinkDrawerTypeType -->
  <xs:simpleType name="LinkDrawerTypeType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for LinkDrawerType.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Basic" />
      <xs:enumeration value="CornerFiller" />
      <xs:enumeration value="CornerOverlay" />
      <xs:enumeration value="Transmitter" />
      <xs:enumeration value="TransmitterOverlay" />
      <xs:enumeration value="Asymmetric" />
    </xs:restriction>
  </xs:simpleType>

  <!-- LinkFlagsType -->
  <xs:simpleType name="LinkFlagsType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for LinkFlags.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="0" />
      <xs:enumeration value="MapEdge" />
      <xs:enumeration value="1" />
      <xs:enumeration value="Rock" />
      <xs:enumeration value="2" />
      <xs:enumeration value="Wall" />
      <xs:enumeration value="4" />
      <xs:enumeration value="Sandbags" />
      <xs:enumeration value="8" />
      <xs:enumeration value="PowerConduit" />
      <xs:enumeration value="16" />
      <xs:enumeration value="Barricades" />
      <xs:enumeration value="32" />
      <xs:enumeration value="Fences" />
      <xs:enumeration value="64" />
      <xs:enumeration value="Fleshmass" />
      <xs:enumeration value="128" />
      <xs:enumeration value="Custom1" />
      <xs:enumeration value="131072" />
      <xs:enumeration value="Custom2" />
      <xs:enumeration value="262144" />
      <xs:enumeration value="Custom3" />
      <xs:enumeration value="524288" />
      <xs:enumeration value="Custom4" />
      <xs:enumeration value="1048576" />
      <xs:enumeration value="Custom5" />
      <xs:enumeration value="2097152" />
      <xs:enumeration value="Custom6" />
      <xs:enumeration value="4194304" />
      <xs:enumeration value="Custom7" />
      <xs:enumeration value="8388608" />
      <xs:enumeration value="Custom8" />
      <xs:enumeration value="16777216" />
      <xs:enumeration value="Custom9" />
      <xs:enumeration value="33554432" />
      <xs:enumeration value="Custom10" />
      <xs:enumeration value="67108864" />
    </xs:restriction>
  </xs:simpleType>

  <!-- AsymmetricLinkDataType -->
  <xs:complexType name="AsymmetricLinkDataType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's AsymmetricLinkData type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="linkFlags" type="LinkFlagsType" />
      <xs:element name="linkToDoors" type="xs:boolean" />
      <xs:element name="drawDoorBorderEast" type="AsymmetricLinkData.BorderDataType" />
      <xs:element name="drawDoorBorderWest" type="AsymmetricLinkData.BorderDataType" />
      <xs:element name="color" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Color.black</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="size" type="xs:string" />
      <xs:element name="offset" type="xs:string" />
    </xs:choice>
  </xs:complexType>

  <!-- AsymmetricLinkData.BorderDataType -->
  <xs:complexType name="AsymmetricLinkData.BorderDataType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's BorderData type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="color" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Color.black</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="size" type="xs:string" />
      <xs:element name="offset" type="xs:string" />
    </xs:choice>
  </xs:complexType>

  <!-- DrawerTypeType -->
  <xs:simpleType name="DrawerTypeType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for DrawerType.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="RealtimeOnly" />
      <xs:enumeration value="MapMeshOnly" />
      <xs:enumeration value="MapMeshAndRealTime" />
    </xs:restriction>
  </xs:simpleType>

  <!-- ResourceCountPriorityType -->
  <xs:simpleType name="ResourceCountPriorityType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for ResourceCountPriority.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Uncounted" />
      <xs:enumeration value="Last" />
      <xs:enumeration value="Middle" />
      <xs:enumeration value="First" />
    </xs:restriction>
  </xs:simpleType>

  <!-- SoundDefType -->
  <xs:complexType name="SoundDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's SoundDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="sustain" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>If checked, this sound is a sustainer.\n\nSustainers are used for
                sounds with a defined beginning and end (as opposed to OneShots, which just fire at
                a given instant).\n\nThis value must match what the game expects from the
                SubSoundDef with this name.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="context" type="SoundContextType">
            <xs:annotation>
              <xs:documentation>When the sound is allowed to play: only when the map view is active,
                only when the world view is active, or always (map + world + main menu).</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="eventNames">
            <xs:annotation>
              <xs:documentation>Event names for this sound. \n\nThe code will look up sounds to play
                them according to their name. If the code finds the event name it wants in this
                list, it will trigger this sound.\n\nThe Def name is also used as an event name.
                Obsolete Default: new List&lt;string&gt;()</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="maxVoices" type="xs:integer">
            <xs:annotation>
              <xs:documentation>For one-shots, this is the number of individual sounds from this Def
                than can be playing at a time.\n\n For sustainers, this is the number of sustainers
                that can be running with this sound (each of which can have sub-sounds). Sustainers
                can fade in and out as you move the camera or objects move, to keep the nearest ones
                audible.\n\nThis setting may not work for on-camera sounds. Default: 4</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="maxSimultaneous" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The number of instances of this sound that can play at almost
                exactly the same moment. Handles cases like six gunners all firing their identical
                guns at the same time because a target came into view of all of them at the same
                time. Ordinarily this would make a painfully loud sound, but you can reduce it with
                this. Default: 3</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="priorityMode" type="VoicePriorityModeType">
            <xs:annotation>
              <xs:documentation>If the system has to not play some instances of this sound because
                of maxVoices, this determines which ones are ignored.\n\nYou should use
                PrioritizeNewest for things like gunshots, so older still-playing samples are
                overridden by newer, more important ones.\n\nSustained sounds should usually
                prioritize nearest, so if a new fire starts burning nearby it can override a more
                distant one.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="slot" type="xs:string">
            <xs:annotation>
              <xs:documentation>The special sound slot this sound takes. If a sound with this slot
                is playing, new sounds in this slot will not play.\n\nOnly works for on-camera
                sounds. Default: ""</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="sustainStartSound" type="SoundDefType">
            <xs:annotation>
              <xs:documentation>The name of the SoundDef that will be played when this sustainer
                starts.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="sustainStopSound" type="SoundDefType">
            <xs:annotation>
              <xs:documentation>The name of the SoundDef that will be played when this sustainer
                ends.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="sustainFadeoutTime" type="xs:float">
            <xs:annotation>
              <xs:documentation>After a sustainer is ended, the sound will fade out over this many
                real-time seconds.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="sustainFadeoutStartSound" type="SoundDefType">
            <xs:annotation>
              <xs:documentation>The name of the SoundDef that will be played when this sustainer
                starts to fade out.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="subSounds">
            <xs:annotation>
              <xs:documentation>All the sounds that will play when this set is triggered. Default:
                new List&lt;SubSoundDef&gt;()</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="SubSoundDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="isUndefined" type="xs:boolean" />
          <xs:element name="testSustainer" type="SustainerType" />
          <xs:element name="MaxSimultaneousSamples" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: this.maxSimultaneous * this.subSounds.Count</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>

  <!-- SurfaceTypeType -->
  <xs:simpleType name="SurfaceTypeType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for SurfaceType.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Item" />
      <xs:enumeration value="Eat" />
    </xs:restriction>
  </xs:simpleType>

  <!-- TradeabilityType -->
  <xs:simpleType name="TradeabilityType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for Tradeability.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Sellable" />
      <xs:enumeration value="Buyable" />
      <xs:enumeration value="All" />
    </xs:restriction>
  </xs:simpleType>

  <!-- ToolType -->
  <xs:complexType name="ToolType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's Tool type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="id" type="xs:string" />
      <xs:element name="label" type="xs:string" />
      <xs:element name="labelNoLocation" type="xs:string" />
      <xs:element name="untranslatedLabel" type="xs:string" />
      <xs:element name="labelUsedInLogging" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="capacities">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;ToolCapacityDef&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="power" type="xs:float" />
      <xs:element name="armorPenetration" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: -1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="cooldownTime" type="xs:float" />
      <xs:element name="surpriseAttack" type="SurpriseAttackPropsType" />
      <xs:element name="hediff" type="HediffDefType" />
      <xs:element name="chanceFactor" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="alwaysTreatAsWeapon" type="xs:boolean" />
      <xs:element name="extraMeleeDamages">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="ExtraDamageType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="soundMeleeHit" type="SoundDefType" />
      <xs:element name="soundMeleeMiss" type="SoundDefType" />
      <xs:element name="linkedBodyPartsGroup" type="xs:string" />
      <xs:element name="ensureLinkedBodyPartsGroupAlwaysUsable" type="xs:boolean" />
    </xs:choice>
  </xs:complexType>

  <!-- SurpriseAttackPropsType -->
  <xs:complexType name="SurpriseAttackPropsType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's SurpriseAttackProps type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="extraMeleeDamages">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="ExtraDamageType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- ExtraDamageType -->
  <xs:complexType name="ExtraDamageType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's ExtraDamage type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="def" type="DamageDefType" />
      <xs:element name="amount" type="xs:float" />
      <xs:element name="armorPenetration" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: -1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="chance" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- HediffDefType -->
  <xs:complexType name="HediffDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's HediffDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="hediffClass" type="System.TypeType">
            <xs:annotation>
              <xs:documentation>Default: typeof (Hediff)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="comps">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="HediffCompPropertiesType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="descriptionShort" type="xs:string" />
          <xs:element name="debugLabelExtra" type="xs:string" />
          <xs:element name="initialSeverity" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 0.5f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="lethalSeverity" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: -1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stages">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="HediffStageType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="tendable" type="xs:boolean" />
          <xs:element name="isBad" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="spawnThingOnRemoved" type="xs:string" />
          <xs:element name="chanceToCauseNoPain" type="xs:float" />
          <xs:element name="canApplyDodChanceForCapacityChanges" type="xs:boolean" />
          <xs:element name="makesSickThought" type="xs:boolean" />
          <xs:element name="makesAlert" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="causesNeed" type="NeedDefType" />
          <xs:element name="disablesNeeds">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="NeedDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="minSeverity" type="xs:float" />
          <xs:element name="maxSeverity" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: float.MaxValue</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="scenarioCanAdd" type="xs:boolean" />
          <xs:element name="hediffGivers">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="HediffGiverType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="cureAllAtOnceIfCuredByItem" type="xs:boolean" />
          <xs:element name="taleOnVisible" type="TaleDefType" />
          <xs:element name="recordDownedTale" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="everCurableByItem" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="tags">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="priceImpact" type="xs:boolean" />
          <xs:element name="priceOffset" type="xs:float" />
          <xs:element name="chronic" type="xs:boolean" />
          <xs:element name="keepOnBodyPartRestoration" type="xs:boolean" />
          <xs:element name="countsAsAddedPartOrImplant" type="xs:boolean" />
          <xs:element name="blocksSocialInteraction" type="xs:boolean" />
          <xs:element name="blocksSleeping" type="xs:boolean" />
          <xs:element name="overrideTooltip" type="xs:string" />
          <xs:element name="extraTooltip" type="xs:string" />
          <xs:element name="levelIsQuantity" type="xs:boolean" />
          <xs:element name="removeOnDeathrestStart" type="xs:boolean" />
          <xs:element name="preventsCrawling" type="xs:boolean" />
          <xs:element name="preventsPregnancy" type="xs:boolean" />
          <xs:element name="preventsLungRot" type="xs:boolean" />
          <xs:element name="pregnant" type="xs:boolean" />
          <xs:element name="allowMothballIfLowPriorityWorldPawn" type="xs:boolean" />
          <xs:element name="removeWithTags">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="onlyLifeThreateningTo">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="BodyPartDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="canAffectBionicOrImplant" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="alwaysShowSeverity" type="xs:boolean" />
          <xs:element name="showGizmosOnCorpse" type="xs:boolean" />
          <xs:element name="defaultInstallPart" type="BodyPartDefType" />
          <xs:element name="possiblePathways">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="HediffInfectionPathwayType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="givesInfectionPathways">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="InfectionPathwayDefType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="duplicationAllowed" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="preventsDeath" type="xs:boolean" />
          <xs:element name="allowedMeditationFocusTypes">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="MeditationFocusDefType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="abilities">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="AbilityDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="isInfection" type="xs:boolean" />
          <xs:element name="forceRemoveOnResurrection" type="xs:boolean" />
          <xs:element name="organicAddedBodypart" type="xs:boolean" />
          <xs:element name="deprioritizeHealing" type="xs:boolean" />
          <xs:element name="clearsEgo" type="xs:boolean" />
          <xs:element name="aptitudes">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="AptitudeType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="removeOnRedressChanceByDaysCurve" type="SimpleCurveType">
            <xs:annotation>
              <xs:documentation>Default: new SimpleCurve() { { new CurvePoint(0.0f, 0.0f), true }, {
                new CurvePoint(1f, 0.0f), true } }</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="removeOnQuestLodgers" type="xs:boolean" />
          <xs:element name="removeOnRedressIfNotOfKind">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="PawnKindDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="displayWound" type="xs:boolean" />
          <xs:element name="defaultLabelColor" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: Color.white</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="skinShader" type="ShaderTypeDefType" />
          <xs:element name="forceRenderTreeRecache" type="xs:boolean" />
          <xs:element name="injuryProps" type="InjuryPropsType" />
          <xs:element name="addedPartProps" type="AddedBodyPartPropsType" />
          <xs:element name="labelNoun" type="xs:string" />
          <xs:element name="battleStateLabel" type="xs:string" />
          <xs:element name="labelNounPretty" type="xs:string" />
          <xs:element name="targetPrefix" type="xs:string" />
          <xs:element name="IsAddiction" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: typeof
                (Hediff_Addiction).IsAssignableFrom(this.hediffClass)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="reportString" type="xs:string" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>

  <!-- EquipmentTypeType -->
  <xs:simpleType name="EquipmentTypeType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for EquipmentType.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Primary" />
    </xs:restriction>
  </xs:simpleType>

  <!-- TechLevelType -->
  <xs:simpleType name="TechLevelType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for TechLevel.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Undefined" />
      <xs:enumeration value="Animal" />
      <xs:enumeration value="Neolithic" />
      <xs:enumeration value="Medieval" />
      <xs:enumeration value="Industrial" />
      <xs:enumeration value="Spacer" />
      <xs:enumeration value="Ultra" />
      <xs:enumeration value="Archotech" />
    </xs:restriction>
  </xs:simpleType>

  <!-- GraphicType -->
  <xs:complexType name="GraphicType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's Graphic type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="data" type="GraphicDataType" />
      <xs:element name="path" type="xs:string" />
      <xs:element name="maskPath" type="xs:string" />
      <xs:element name="color" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Color.white</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="colorTwo" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Color.white</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="drawSize" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Vector2.one</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Color" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: this.color</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ColorTwo" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: this.colorTwo</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="material" type="xs:string" />
      <xs:element name="vertexColor" type="xs:string" />
    </xs:choice>
  </xs:complexType>


  <!-- RulePackDefType -->
  <xs:complexType name="RulePackDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's RulePackDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="include">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="RulePackDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="directTestable" type="xs:boolean" />
          <xs:element name="RulesImmediate">
            <xs:annotation>
              <xs:documentation>Default: this.rulePack?.Rules</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="RuleType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="UntranslatedRulesImmediate">
            <xs:annotation>
              <xs:documentation>Default: this.rulePack?.UntranslatedRules</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="RuleType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>

  <!-- EntityCodexEntryDefType -->
  <xs:complexType name="EntityCodexEntryDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's EntityCodexEntryDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="category" type="EntityCategoryDefType" />
          <xs:element name="startDiscovered" type="xs:boolean" />
          <xs:element name="linkedThings">
            <xs:annotation>
              <xs:documentation>Default: ThingDef[]</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="discoveredResearchProjects">
            <xs:annotation>
              <xs:documentation>Default: ResearchProjectDef[]</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="ResearchProjectDefType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="provocationIncidents">
            <xs:annotation>
              <xs:documentation>Default: IncidentDef[]</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="IncidentDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="discoveryType" type="EntityDiscoveryTypeType" />
          <xs:element name="allowDiscoveryWhileMapGenerating" type="xs:boolean" />
          <xs:element name="orderInCategory" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: 9999999</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hideInPlaystyles">
            <xs:annotation>
              <xs:documentation>Default: AnomalyPlaystyleDef[]</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="AnomalyPlaystyleDefType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="icon" type="Texture2DType" />
          <xs:element name="silhouette" type="Texture2DType" />
          <xs:element name="Discovered" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: Find.EntityCodex.Discovered(this)</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>

  <!-- IngestiblePropertiesType -->
  <xs:complexType name="IngestiblePropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's IngestibleProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="parent" type="xs:string" />
      <xs:element name="maxNumToIngestAtOnce" type="xs:integer" />
      <xs:element name="defaultNumToIngestAtOnce" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 20</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="outcomeDoers">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:any>
              <!-- TODO:  -->
            </xs:any>
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="baseIngestTicks" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 500</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="chairSearchRadius" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 32f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="useEatingSpeedStat" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="babiesCanIngest" type="xs:boolean" />
      <xs:element name="humanlikeOnly" type="xs:boolean" />
      <xs:element name="tasteThought" type="ThoughtDefType" />
      <xs:element name="specialThoughtDirect" type="ThoughtDefType" />
      <xs:element name="specialThoughtAsIngredient" type="ThoughtDefType" />
      <xs:element name="ateEvent" type="xs:string" />
      <xs:element name="ingestEffect" type="EffecterDefType" />
      <xs:element name="ingestEffectEat" type="EffecterDefType" />
      <xs:element name="ingestSound" type="SoundDefType" />
      <xs:element name="ingestCommandString" type="xs:string" />
      <xs:element name="ingestReportString" type="xs:string" />
      <xs:element name="ingestReportStringEat" type="xs:string" />
      <xs:element name="ingestHoldOffsetStanding" type="HoldOffsetSetType" />
      <xs:element name="ingestHoldUsesTable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="tableDesired" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="showIngestFloatOption" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="foodType" type="FoodTypeFlagsType" />
      <xs:element name="joy" type="xs:float" />
      <xs:element name="joyKind" type="xs:string" />
      <xs:element name="sourceDef" type="xs:string" />
      <xs:element name="preferability" type="FoodPreferabilityType" />
      <xs:element name="nurseable" type="xs:boolean" />
      <xs:element name="optimalityOffsetHumanlikes" type="xs:float" />
      <xs:element name="optimalityOffsetFeedingAnimals" type="xs:float" />
      <xs:element name="drugCategory" type="DrugCategoryType" />
      <xs:element name="canAutoSelectAsFoodForCaravan" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="lowPriorityCaravanFood" type="xs:boolean" />
      <xs:element name="JoyKind" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: this.joyKind ?? JoyKindDefOf.Gluttonous</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="HumanEdible" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: (FoodTypeFlags.OmnivoreHuman &amp; this.foodType) != 0</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- ThoughtDefType -->
  <xs:complexType name="ThoughtDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's ThoughtDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="thoughtClass" type="System.TypeType" />
          <xs:element name="workerClass" type="System.TypeType" />
          <xs:element name="stages">
            <xs:annotation>
              <xs:documentation>Default: new List&lt;ThoughtStage&gt;()</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="ThoughtStageType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="stackLimit" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: 1</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="stackedEffectMultiplier" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 0.75f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="durationDays" type="xs:float" />
          <xs:element name="invert" type="xs:boolean" />
          <xs:element name="validWhileDespawned" type="xs:boolean" />
          <xs:element name="nextThought" type="ThoughtDefType" />
          <xs:element name="producesMemoryThought" type="ThoughtDefType" />
          <xs:element name="nullifyingTraits">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="TraitDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="neverNullifyIfAnyTrait">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="TraitDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="nullifyingTraitDegrees">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="TraitRequirementType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="nullifyingOwnTales">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="TaleDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="nullifyingPrecepts">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="PreceptDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="nullifyingHediffs">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="HediffDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="nullifyingGenes">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="GeneDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="requiredTraits">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="TraitDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="requiredGenes">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="GeneDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="requiredTraitsDegree" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: int.MinValue</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="requiredHediffs">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="HediffDefType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="effectMultiplyingStat" type="StatDefType" />
          <xs:element name="effectMultiplyingStatCurve" type="SimpleCurveType" />
          <xs:element name="hediff" type="HediffDefType" />
          <xs:element name="mentalState" type="MentalStateDefType" />
          <xs:element name="gameCondition" type="GameConditionDefType" />
          <xs:element name="nullifiedIfNotColonist" type="xs:boolean" />
          <xs:element name="thoughtToMake" type="ThoughtDefType" />
          <xs:element name="labelInBracketsExtraForHediff" type="xs:string" />
          <xs:element name="DurationTicks" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: (int) ((double) this.durationDays * 60000.0)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsSituational" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.Worker != null</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsSocial" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: typeof
                (ISocialThought).IsAssignableFrom(this.ThoughtClass)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="RequiresSpecificTraitsDegree" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.requiredTraitsDegree != int.MinValue</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>

  <!-- FoodTypeFlagsType -->
  <xs:simpleType name="FoodTypeFlagsType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for FoodTypeFlags.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="0" />
      <xs:enumeration value="VegetableOrFruit" />
      <xs:enumeration value="1" />
      <xs:enumeration value="Meat" />
      <xs:enumeration value="2" />
      <xs:enumeration value="Fluid" />
      <xs:enumeration value="4" />
      <xs:enumeration value="Corpse" />
      <xs:enumeration value="8" />
      <xs:enumeration value="Seed" />
      <xs:enumeration value="16" />
      <xs:enumeration value="AnimalProduct" />
      <xs:enumeration value="32" />
      <xs:enumeration value="Plant" />
      <xs:enumeration value="64" />
      <xs:enumeration value="Tree" />
      <xs:enumeration value="128" />
      <xs:enumeration value="Meal" />
      <xs:enumeration value="256" />
      <xs:enumeration value="Processed" />
      <xs:enumeration value="512" />
      <xs:enumeration value="Liquor" />
      <xs:enumeration value="1024" />
      <xs:enumeration value="Kibble" />
      <xs:enumeration value="2048" />
      <xs:enumeration value="Fungus" />
      <xs:enumeration value="4097" />
      <xs:enumeration value="VegetarianAnimal" />
      <xs:enumeration value="Fungus" />
      <xs:enumeration value="Kibble" />
      <xs:enumeration value="Liquor" />
      <xs:enumeration value="Processed" />
      <xs:enumeration value="Meal" />
      <xs:enumeration value="Seed" />
      <xs:enumeration value="VegetarianRoughAnimal" />
      <xs:enumeration value="VegetarianAnimal" />
      <xs:enumeration value="Plant" />
      <xs:enumeration value="CarnivoreAnimal" />
      <xs:enumeration value="Kibble" />
      <xs:enumeration value="Processed" />
      <xs:enumeration value="Meal" />
      <xs:enumeration value="Corpse" />
      <xs:enumeration value="Meat" />
      <xs:enumeration value="CarnivoreAnimalStrict" />
      <xs:enumeration value="Corpse" />
      <xs:enumeration value="Meat" />
      <xs:enumeration value="OmnivoreAnimal" />
      <xs:enumeration value="CarnivoreAnimalStrict" />
      <xs:enumeration value="VegetarianAnimal" />
      <xs:enumeration value="OmnivoreRoughAnimal" />
      <xs:enumeration value="OmnivoreAnimal" />
      <xs:enumeration value="Plant" />
      <xs:enumeration value="DendrovoreAnimal" />
      <xs:enumeration value="Fungus" />
      <xs:enumeration value="Kibble" />
      <xs:enumeration value="Processed" />
      <xs:enumeration value="Tree" />
      <xs:enumeration value="Seed" />
      <xs:enumeration value="OvivoreAnimal" />
      <xs:enumeration value="Kibble" />
      <xs:enumeration value="Processed" />
      <xs:enumeration value="Meal" />
      <xs:enumeration value="AnimalProduct" />
      <xs:enumeration value="OmnivoreHuman" />
      <xs:enumeration value="OvivoreAnimal" />
      <xs:enumeration value="CarnivoreAnimalStrict" />
      <xs:enumeration value="Fungus" />
      <xs:enumeration value="Liquor" />
      <xs:enumeration value="Seed" />
      <xs:enumeration value="Fluid" />
    </xs:restriction>
  </xs:simpleType>

  <!-- FoodPreferabilityType -->
  <xs:simpleType name="FoodPreferabilityType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for FoodPreferability.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Undefined" />
      <xs:enumeration value="NeverForNutrition" />
      <xs:enumeration value="DesperateOnly" />
      <xs:enumeration value="DesperateOnlyForHumanlikes" />
      <xs:enumeration value="RawBad" />
      <xs:enumeration value="RawTasty" />
      <xs:enumeration value="MealTerrible" />
      <xs:enumeration value="MealAwful" />
      <xs:enumeration value="MealSimple" />
      <xs:enumeration value="MealFine" />
      <xs:enumeration value="MealLavish" />
    </xs:restriction>
  </xs:simpleType>

  <!-- DrugCategoryType -->
  <xs:simpleType name="DrugCategoryType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for DrugCategory.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Medical" />
      <xs:enumeration value="Social" />
      <xs:enumeration value="Hard" />
      <xs:enumeration value="Any" />
    </xs:restriction>
  </xs:simpleType>

  <!-- FilthPropertiesType -->
  <xs:complexType name="FilthPropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's FilthProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="cleaningWorkToReduceThickness" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 35f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="canFilthAttach" type="xs:boolean" />
      <xs:element name="rainWashes" type="xs:boolean" />
      <xs:element name="allowsFire" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ignoreFilthMultiplierStat" type="xs:boolean" />
      <xs:element name="maxThickness" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 100</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="disappearsInDays" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: FloatRange.Zero</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="placementMask" type="FilthSourceFlagsType">
        <xs:annotation>
          <xs:documentation>Default: FilthSourceFlags.Unnatural</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="cleaningSound" type="SoundDefType" />
    </xs:choice>
  </xs:complexType>

  <!-- FilthSourceFlagsType -->
  <xs:simpleType name="FilthSourceFlagsType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for FilthSourceFlags.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="0" />
      <xs:enumeration value="Terrain" />
      <xs:enumeration value="1" />
      <xs:enumeration value="Natural" />
      <xs:enumeration value="2" />
      <xs:enumeration value="Unnatural" />
      <xs:enumeration value="4" />
      <xs:enumeration value="Pawn" />
      <xs:enumeration value="8" />
      <xs:enumeration value="Any" />
      <xs:enumeration value="Pawn" />
      <xs:enumeration value="Unnatural" />
      <xs:enumeration value="Natural" />
      <xs:enumeration value="Terrain" />
    </xs:restriction>
  </xs:simpleType>

  <!-- BuildingPropertiesType -->
  <xs:complexType name="BuildingPropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's BuildingProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="isEdifice" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="buildingTags">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;string&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="isInert" type="xs:boolean" />
      <xs:element name="isTargetable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="alwaysDeconstructible" type="xs:boolean" />
      <xs:element name="leavingsBlacklist">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="claimable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="isSittable" type="xs:boolean" />
      <xs:element name="multiSittable" type="xs:boolean" />
      <xs:element name="sitIgnoreOrientation" type="xs:boolean" />
      <xs:element name="soundAmbient" type="SoundDefType" />
      <xs:element name="spawnedConceptLearnOpportunity" type="ConceptDefType" />
      <xs:element name="boughtConceptLearnOpportunity" type="ConceptDefType" />
      <xs:element name="expandHomeArea" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="blueprintClass" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: typeof (Blueprint_Build)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="blueprintGraphicData" type="GraphicDataType" />
      <xs:element name="uninstallWork" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 200f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="forceShowRoomStats" type="xs:boolean" />
      <xs:element name="neverBuildable" type="xs:boolean" />
      <xs:element name="wantsHopperAdjacent" type="xs:boolean" />
      <xs:element name="allowWireConnection" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="shipPart" type="xs:boolean" />
      <xs:element name="canPlaceOverImpassablePlant" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="heatPerTickWhileWorking" type="xs:float" />
      <xs:element name="canBuildNonEdificesUnder" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="canPlaceOverWall" type="xs:boolean" />
      <xs:element name="isPlaceOverableWall" type="xs:boolean" />
      <xs:element name="allowAutoroof" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="preventDeteriorationOnTop" type="xs:boolean" />
      <xs:element name="preventDeteriorationInside" type="xs:boolean" />
      <xs:element name="isMealSource" type="xs:boolean" />
      <xs:element name="isNaturalRock" type="xs:boolean" />
      <xs:element name="isResourceRock" type="xs:boolean" />
      <xs:element name="repairable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="roofCollapseDamageMultiplier" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="hasFuelingPort" type="xs:boolean" />
      <xs:element name="smoothedThing" type="xs:string" />
      <xs:element name="unsmoothedThing" type="xs:string" />
      <xs:element name="naturalTerrain" type="TerrainDefType" />
      <xs:element name="leaveTerrain" type="TerrainDefType" />
      <xs:element name="combatPower" type="xs:float" />
      <xs:element name="minMechClusterPoints" type="xs:integer" />
      <xs:element name="destroyShakeAmount" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: -1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="destroySound" type="SoundDefType" />
      <xs:element name="soundMeleeHitOverride" type="SoundDefType" />
      <xs:element name="destroyEffecter" type="EffecterDefType" />
      <xs:element name="buildingSizeCategory" type="BuildingSizeCategoryType" />
      <xs:element name="isFence" type="xs:boolean" />
      <xs:element name="relatedBuildCommands">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="alwaysShowRelatedBuildCommands" type="xs:boolean" />
      <xs:element name="useIdeoColor" type="xs:boolean" />
      <xs:element name="wakeDormantPawnsOnConstruction" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="maxItemsInCell" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 1</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="paintable" type="xs:boolean" />
      <xs:element name="canBeDamagedByAttacks" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="isHopper" type="xs:boolean" />
      <xs:element name="quickTargetable" type="xs:boolean" />
      <xs:element name="displayAttackToDestroyOnInspectPane" type="xs:boolean" />
      <xs:element name="isEscapableContainer" type="xs:boolean" />
      <xs:element name="isPowerConduit" type="xs:boolean" />
      <xs:element name="isAttachment" type="xs:boolean" />
      <xs:element name="supportsWallAttachments" type="xs:boolean" />
      <xs:element name="isPlayerEjectable" type="xs:boolean" />
      <xs:element name="openingStartedSound" type="SoundDefType" />
      <xs:element name="fullGraveGraphicData" type="GraphicDataType" />
      <xs:element name="bed_healPerDay" type="xs:float" />
      <xs:element name="bed_defaultMedical" type="xs:boolean" />
      <xs:element name="bed_showSleeperBody" type="xs:boolean" />
      <xs:element name="bed_humanlike" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="bed_maxBodySize" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 9999f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="bed_caravansCanUse" type="xs:boolean" />
      <xs:element name="bed_slabBed" type="xs:boolean" />
      <xs:element name="bed_crib" type="xs:boolean" />
      <xs:element name="bed_pawnDrawOffset" type="xs:float" />
      <xs:element name="bed_canBeMedical" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="bed_DisplayOwnerType" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="bed_DisplayOwnersInInspectString" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="bed_countsForBedroomOrBarracks" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="bed_emptyCountsForBarracks" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="bed_UseSheetColor" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="nutritionCostPerDispense" type="xs:float" />
      <xs:element name="soundDispense" type="SoundDefType" />
      <xs:element name="turretGunDef" type="xs:string" />
      <xs:element name="turretBurstWarmupTime" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: new FloatRange(0.25f, 0.75f)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="turretBurstCooldownTime" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: -1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="turretInitialCooldownTime" type="xs:float" />
      <xs:element name="turretTopMat" type="xs:string" />
      <xs:element name="turretTopLoadedMat" type="xs:string" />
      <xs:element name="turretTopDrawSize" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 2f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="turretTopOffset" type="xs:string" />
      <xs:element name="playTargetAcquiredSound" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="turretTopLoadedGraphic" type="GraphicDataType" />
      <xs:element name="requiredMechWeightClasses">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="MechWeightClassType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="ai_combatDangerous" type="xs:boolean" />
      <xs:element name="ai_chillDestination" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ai_neverTrashThis" type="xs:boolean" />
      <xs:element name="preferConnectingToFences" type="xs:boolean" />
      <xs:element name="roamerCanOpen" type="xs:boolean" />
      <xs:element name="soundDoorOpenPowered" type="SoundDefType" />
      <xs:element name="soundDoorClosePowered" type="SoundDefType" />
      <xs:element name="soundDoorOpenManual" type="SoundDefType" />
      <xs:element name="soundDoorCloseManual" type="SoundDefType" />
      <xs:element name="soundDoorCloseEnd" type="SoundDefType" />
      <xs:element name="poweredDoorOpenSpeedFactor" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="poweredDoorCloseSpeedFactor" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="unpoweredDoorOpenSpeedFactor" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="unpoweredDoorCloseSpeedFactor" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="sowTag" type="xs:string" />
      <xs:element name="defaultPlantToGrow" type="xs:string" />
      <xs:element name="mineableThing" type="xs:string" />
      <xs:element name="mineableYield" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 1</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="veinMineable" type="xs:boolean" />
      <xs:element name="mineableNonMinedEfficiency" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 0.7f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="mineableDropChance" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="mineableYieldWasteable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="mineableScatterCommonality" type="xs:float" />
      <xs:element name="mineableScatterLumpSizeRange" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: new IntRange(20, 40)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="fixedStorageSettings" type="StorageSettingsType" />
      <xs:element name="defaultStorageSettings" type="StorageSettingsType" />
      <xs:element name="ignoreStoredThingsBeauty" type="xs:boolean" />
      <xs:element name="storageGroupTag" type="xs:string" />
      <xs:element name="groupingLabel" type="xs:string" />
      <xs:element name="groupingOrder" type="xs:integer" />
      <xs:element name="isTrap" type="xs:boolean" />
      <xs:element name="trapDestroyOnSpring" type="xs:boolean" />
      <xs:element name="trapPeacefulWildAnimalsSpringChanceFactor" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="trapDamageCategory" type="DamageArmorCategoryDefType" />
      <xs:element name="trapUnarmedGraphicData" type="GraphicDataType" />
      <xs:element name="trapUnarmedGraphic" type="GraphicType" />
      <xs:element name="unpoweredWorkTableWorkSpeedFactor" type="xs:float" />
      <xs:element name="workTableCompleteSoundDef" type="SoundDefType" />
      <xs:element name="watchBuildingStandDistanceRange" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: IntRange.one</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="watchBuildingStandRectWidth" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 3</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="watchBuildingInSameRoom" type="xs:boolean" />
      <xs:element name="joyKind" type="xs:string" />
      <xs:element name="haulToContainerDuration" type="xs:integer" />
      <xs:element name="instrumentRange" type="xs:float" />
      <xs:element name="minDistanceToSameTypeOfBuilding" type="xs:integer" />
      <xs:element name="artificialForMeditationPurposes" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="effectWatching" type="EffecterDefType" />
      <xs:element name="gibbetCageTopGraphicData" type="GraphicDataType" />
      <xs:element name="gibbetCorposeDrawOffset" type="xs:string" />
      <xs:element name="gibbetCagePlaceCorpseEffecter" type="EffecterDefType" />
      <xs:element name="openingEffect" type="EffecterDefType" />
      <xs:element name="barDrawData" type="FillableBarRequestWithRotationType" />
      <xs:element name="gestatorFormingMote" type="MoteForRotationDataType" />
      <xs:element name="gestatorCycleCompleteMote" type="MoteForRotationDataType" />
      <xs:element name="gestatorFormedMote" type="MoteForRotationDataType" />
      <xs:element name="mechGestatorCylinderGraphic" type="GraphicDataType" />
      <xs:element name="mechGestatorTopGraphic" type="GraphicDataType" />
      <xs:element name="formingGraphicData" type="GraphicDataType" />
      <xs:element name="formingMechBobSpeed" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f / 1000f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="formingMechYBobDistance" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 0.1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="formingMechPerRotationOffset">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;Vector3&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="maxFormedMechDrawSize" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: new Vector2(1.5f, 1.5f)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="subcoreScannerFixedIngredients">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:any />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="subcoreScannerTicks" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 7500</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="subcoreScannerHediff" type="HediffDefType" />
      <xs:element name="destroyBrain" type="xs:boolean" />
      <xs:element name="subcoreScannerOutputDef" type="xs:string" />
      <xs:element name="subcoreScannerStartEffect" type="EffecterDefType" />
      <xs:element name="subcoreScannerWorking" type="SoundDefType" />
      <xs:element name="subcoreScannerComplete" type="SoundDefType" />
      <xs:element name="isInsectCocoon" type="xs:boolean" />
      <xs:element name="wastepackAtomizerBottomGraphic" type="GraphicDataType" />
      <xs:element name="wastepackAtomizerWindowGraphic" type="GraphicDataType" />
      <xs:element name="wastepackAtomizerOperationEffecter" type="EffecterDefType" />
      <xs:element name="bookendGraphicEast" type="GraphicDataType" />
      <xs:element name="bookendGraphicNorth" type="GraphicDataType" />
      <xs:element name="doorTopGraphic" type="GraphicDataType" />
      <xs:element name="doorSupportGraphic" type="GraphicDataType" />
      <xs:element name="upperMoverGraphic" type="GraphicDataType" />
      <xs:element name="groundSpawnerThingToSpawn" type="xs:string" />
      <xs:element name="groundSpawnerSpawnDelay" type="xs:string" />
      <xs:element name="groundSpawnerDestroyAdjacent" type="xs:boolean" />
      <xs:element name="groundSpawnerSustainerSound" type="SoundDefType" />
      <xs:element name="groundSpawnerSustainedEffecter" type="EffecterDefType" />
      <xs:element name="groundSpawnerCompleteEffecter" type="EffecterDefType" />
      <xs:element name="groundSpawnerLetterLabel" type="xs:string" />
      <xs:element name="groundSpawnerLetterText" type="xs:string" />
      <xs:element name="SupportsPlants" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.sowTag != null</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="IsTurret" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.turretGunDef != null</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- ConceptDefType -->
  <xs:complexType name="ConceptDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's ConceptDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="priority" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: float.MaxValue</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="noteTeaches" type="xs:boolean" />
          <xs:element name="needsOpportunity" type="xs:boolean" />
          <xs:element name="opportunityDecays" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="gameMode" type="ProgramStateType">
            <xs:annotation>
              <xs:documentation>Default: ProgramState.Playing</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="highlightTags">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="TriggeredDirect" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: (double) this.priority &lt;= 0.0</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>

  <!-- RacePropertiesType -->
  <xs:complexType name="RacePropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's RaceProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="intelligence" type="IntelligenceType" />
      <xs:element name="hasGenders" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="needsRest" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="thinkTreeMain" type="xs:string" />
      <xs:element name="thinkTreeConstant" type="xs:string" />
      <xs:element name="dutyBoss" type="xs:string" />
      <xs:element name="nameCategory" type="xs:string" />
      <xs:element name="foodType" type="FoodTypeFlagsType" />
      <xs:element name="body" type="xs:string" />
      <xs:element name="deathAction" type="DeathActionPropertiesType">
        <xs:annotation>
          <xs:documentation>Default: new DeathActionProperties()</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="wildBiomes">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:any />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="ageGenerationCurve" type="SimpleCurveType" />
      <xs:element name="makesFootprints" type="xs:boolean" />
      <xs:element name="executionRange" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 2</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="lifeExpectancy" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 10f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="hediffGiverSets">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="HediffGiverSetDefType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="allowedOnCaravan" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="canReleaseToWild" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="playerCanChangeMaster" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="showTrainables" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="hideTrainingTab" type="xs:boolean" />
      <xs:element name="doesntMove" type="xs:boolean" />
      <xs:element name="renderTree" type="xs:string" />
      <xs:element name="startingAnimation" type="xs:string" />
      <xs:element name="linkedCorpseKind" type="xs:string" />
      <xs:element name="canOpenFactionlessDoors" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="alwaysAwake" type="xs:boolean" />
      <xs:element name="alwaysViolent" type="xs:boolean" />
      <xs:element name="isImmuneToInfections" type="xs:boolean" />
      <xs:element name="bleedRateFactor" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="canBecomeShambler" type="xs:boolean" />
      <xs:element name="herdAnimal" type="xs:boolean" />
      <xs:element name="packAnimal" type="xs:boolean" />
      <xs:element name="predator" type="xs:boolean" />
      <xs:element name="maxPreyBodySize" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 99999f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="wildness" type="xs:float" />
      <xs:element name="petness" type="xs:float" />
      <xs:element name="nuzzleMtbHours" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: -1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="manhunterOnDamageChance" type="xs:float" />
      <xs:element name="manhunterOnTameFailChance" type="xs:float" />
      <xs:element name="canBePredatorPrey" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="herdMigrationAllowed" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="animalType" type="xs:string" />
      <xs:element name="willNeverEat">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="giveNonToolUserBeatFireVerb" type="xs:boolean" />
      <xs:element name="disableIgniteVerb" type="xs:boolean" />
      <xs:element name="disableAreaControl" type="xs:boolean" />
      <xs:element name="maxMechEnergy" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 100</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="mechEnabledWorkTypes">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;WorkTypeDef&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="mechFixedSkillLevel" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 10</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="mechWorkTypePriorities">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:any />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="bulletStaggerEffecterDef" type="EffecterDefType" />
      <xs:element name="bulletStaggerIgnoreBodySize" type="xs:boolean" />
      <xs:element name="mechWeightClass" type="MechWeightClassType">
        <xs:annotation>
          <xs:documentation>Default: MechWeightClass.Medium</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="detritusLeavings">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;DetritusLeavingType&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="DetritusLeavingTypeType" minOccurs="0"
              maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="overrideShouldHaveAbilityTracker" type="xs:boolean" />
      <xs:element name="gestationPeriodDays" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: -1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="litterSizeCurve" type="SimpleCurveType" />
      <xs:element name="mateMtbHours" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 12f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="untrainableTags">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="trainableTags">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="trainability" type="xs:string" />
      <xs:element name="nameOnTameChance" type="xs:float" />
      <xs:element name="baseBodySize" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="baseHealthScale" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="baseHungerRate" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="lifeStageAges">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;LifeStageAge&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:any>
              <!-- TODO:  -->
            </xs:any>
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="lifeStageWorkSettings">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;LifeStageWorkSettings&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:any>
              <!-- TODO:  -->
            </xs:any>
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="hasMeat" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="meatLabel" type="xs:string" />
      <xs:element name="meatColor" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Color.white</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="meatMarketValue" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 2f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="specificMeatDef" type="xs:string" />
      <xs:element name="useMeatFrom" type="xs:string" />
      <xs:element name="useLeatherFrom" type="xs:string" />
      <xs:element name="hasCorpse" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="hasUnnaturalCorpse" type="xs:boolean" />
      <xs:element name="corpseHiddenWhileUndiscovered" type="xs:boolean" />
      <xs:element name="leatherDef" type="xs:string" />
      <xs:element name="specialShadowData" type="ShadowDataType" />
      <xs:element name="headPosPerRotation">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="soundCallIntervalRange" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: new IntRange(2000, 4000)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="soundCallIntervalFriendlyFactor" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="soundCallIntervalAggressiveFactor" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 0.25f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="soundMeleeHitPawn" type="SoundDefType" />
      <xs:element name="soundMeleeHitBuilding" type="SoundDefType" />
      <xs:element name="soundMeleeMiss" type="SoundDefType" />
      <xs:element name="soundMeleeDodge" type="SoundDefType" />
      <xs:element name="soundAmbience" type="SoundDefType" />
      <xs:element name="soundMoving" type="SoundDefType" />
      <xs:element name="soundEating" type="SoundDefType" />
      <xs:element name="knowledgeCategory" type="xs:string" />
      <xs:element name="anomalyKnowledge" type="xs:integer" />
      <xs:element name="meatDef" type="xs:string" />
      <xs:element name="corpseDef" type="xs:string" />
      <xs:element name="unnaturalCorpseDef" type="xs:string" />
      <xs:element name="Humanlike" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.intelligence &gt;= Intelligence.Humanlike</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ToolUser" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.intelligence &gt;= Intelligence.ToolUser</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Animal" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: !this.ToolUser &amp;&amp; this.IsFlesh &amp;&amp;
            !this.IsAnomalyEntity</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Insect" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.FleshType == FleshTypeDefOf.Insectoid</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Dryad" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.animalType == AnimalType.Dryad</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="EatsFood" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.foodType != 0</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DeathActionWorker" type="DeathActionWorkerType">
        <xs:annotation>
          <xs:documentation>Default: this.deathAction.Worker</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="FleshType" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: this.fleshType ?? FleshTypeDefOf.Normal</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="IsMechanoid" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.FleshType == FleshTypeDefOf.Mechanoid</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="IsFlesh" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.FleshType.isOrganic</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="BloodDef" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: this.bloodDef</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="BloodSmearDef" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: this.bloodSmearDef</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="CanDoHerdMigration" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.Animal &amp;&amp; this.herdMigrationAllowed</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="CanPassFences" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: !this.FenceBlocked</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="FenceBlocked" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.Roamer</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Roamer" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.roamMtbDays.HasValue</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="IsWorkMech" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: &gt;
            !this.mechEnabledWorkTypes.NullOrEmpty&lt;WorkTypeDef&gt;()</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- IntelligenceType -->
  <xs:simpleType name="IntelligenceType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for Intelligence.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Animal" />
      <xs:enumeration value="ToolUser" />
      <xs:enumeration value="Humanlike" />
    </xs:restriction>
  </xs:simpleType>

  <!-- SimpleCurveType -->
  <xs:complexType name="SimpleCurveType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's SimpleCurve type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="IEnumerableType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="PointsCount" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Default: this.points.Count</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Points">
            <xs:annotation>
              <xs:documentation>Default: this.points</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="CurvePointType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="HasView" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.view != null</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>

  <!-- ApparelPropertiesType -->
  <xs:complexType name="ApparelPropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's ApparelProperties type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
        <xs:extension base="IRenderNodePropertiesParentType">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="bodyPartGroups">
              <xs:annotation>
                <xs:documentation>Default: new List&lt;BodyPartGroupDef&gt;()</xs:documentation>
              </xs:annotation>
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="BodyPartGroupDefType" minOccurs="0"
                    maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="layers">
              <xs:annotation>
                <xs:documentation>Default: new List&lt;ApparelLayerDef&gt;()</xs:documentation>
              </xs:annotation>
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="ApparelLayerDefType" minOccurs="0"
                    maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="wornGraphicPath" type="xs:string">
              <xs:annotation>
                <xs:documentation>Default: ""</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="wornGraphicPaths">
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="wornGraphicData" type="WornGraphicDataType" />
            <xs:element name="useWornGraphicMask" type="xs:boolean" />
            <xs:element name="renderSkipFlags">
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="RenderSkipFlagDefType" minOccurs="0"
                    maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="drawData" type="DrawDataType" />
            <xs:element name="parentTagDef" type="PawnRenderNodeTagDefType" />
            <xs:element name="forceEyesVisibleForRotations">
              <xs:annotation>
                <xs:documentation>Default: new List&lt;int&gt;()</xs:documentation>
              </xs:annotation>
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="xs:integer" minOccurs="0" maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="shellRenderedBehindHead" type="xs:boolean" />
            <xs:element name="tags">
              <xs:annotation>
                <xs:documentation>Default: new List&lt;string&gt;()</xs:documentation>
              </xs:annotation>
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="defaultOutfitTags">
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="canBeGeneratedToSatisfyWarmth" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Default: true</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="canBeGeneratedToSatisfyToxicEnvironmentResistance" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Default: true</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="canBeDesiredForIdeo" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Default: true</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="ideoDesireAllowedFactionCategoryTags">
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="ideoDesireDisallowedFactionCategoryTags">
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="wearPerDay" type="xs:float">
              <xs:annotation>
                <xs:documentation>Default: 0.4f</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="careIfWornByCorpse" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Default: true</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="careIfDamaged" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Default: true</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="ignoredByNonViolent" type="xs:boolean" />
            <xs:element name="ai_pickUpOpportunistically" type="xs:boolean" />
            <xs:element name="blocksAddedPartWoundGraphics" type="xs:boolean" />
            <xs:element name="blocksVision" type="xs:boolean" />
            <xs:element name="immuneToToxGasExposure" type="xs:boolean" />
            <xs:element name="slaveApparel" type="xs:boolean" />
            <xs:element name="mechanitorApparel" type="xs:boolean" />
            <xs:element name="legsNakedUnlessCoveredBySomethingElse" type="xs:boolean" />
            <xs:element name="useDeflectMetalEffect" type="xs:boolean" />
            <xs:element name="countsAsClothingForNudity" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Default: true</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="anyTechLevelCanUseForWarmth" type="xs:boolean" />
            <xs:element name="gender" type="GenderType" />
            <xs:element name="scoreOffset" type="xs:float" />
            <xs:element name="developmentalStageFilter" type="DevelopmentalStageType">
              <xs:annotation>
                <xs:documentation>Default: DevelopmentalStage.Adult</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="soundWear" type="SoundDefType" />
            <xs:element name="soundRemove" type="SoundDefType" />
            <xs:element name="RenderNodeProperties">
              <xs:annotation>
                <xs:documentation>Default: this.renderNodeProperties</xs:documentation>
              </xs:annotation>
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="PawnRenderNodePropertiesType" minOccurs="0"
                    maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:extension>
      </xs:complexContent> -->
    <!-- FIXME: Temporarily Remove inheritance. -->
    <!-- <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="bodyPartGroups">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;BodyPartGroupDef&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="BodyPartGroupDefType" minOccurs="0"
              maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="layers">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;ApparelLayerDef&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="ApparelLayerDefType" minOccurs="0"
              maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="wornGraphicPath" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: ""</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="wornGraphicPaths">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="wornGraphicData" type="WornGraphicDataType" />
      <xs:element name="useWornGraphicMask" type="xs:boolean" />
      <xs:element name="renderSkipFlags">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="RenderSkipFlagDefType" minOccurs="0"
              maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="drawData" type="DrawDataType" />
      <xs:element name="parentTagDef" type="PawnRenderNodeTagDefType" />
      <xs:element name="forceEyesVisibleForRotations">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;int&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:integer" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="shellRenderedBehindHead" type="xs:boolean" />
      <xs:element name="tags">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;string&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="defaultOutfitTags">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="canBeGeneratedToSatisfyWarmth" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="canBeGeneratedToSatisfyToxicEnvironmentResistance" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="canBeDesiredForIdeo" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ideoDesireAllowedFactionCategoryTags">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="ideoDesireDisallowedFactionCategoryTags">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="wearPerDay" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 0.4f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="careIfWornByCorpse" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="careIfDamaged" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ignoredByNonViolent" type="xs:boolean" />
      <xs:element name="ai_pickUpOpportunistically" type="xs:boolean" />
      <xs:element name="blocksAddedPartWoundGraphics" type="xs:boolean" />
      <xs:element name="blocksVision" type="xs:boolean" />
      <xs:element name="immuneToToxGasExposure" type="xs:boolean" />
      <xs:element name="slaveApparel" type="xs:boolean" />
      <xs:element name="mechanitorApparel" type="xs:boolean" />
      <xs:element name="legsNakedUnlessCoveredBySomethingElse" type="xs:boolean" />
      <xs:element name="useDeflectMetalEffect" type="xs:boolean" />
      <xs:element name="countsAsClothingForNudity" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="anyTechLevelCanUseForWarmth" type="xs:boolean" />
      <xs:element name="gender" type="GenderType" />
      <xs:element name="scoreOffset" type="xs:float" />
      <xs:element name="developmentalStageFilter" type="DevelopmentalStageType">
        <xs:annotation>
          <xs:documentation>Default: DevelopmentalStage.Adult</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="soundWear" type="SoundDefType" />
      <xs:element name="soundRemove" type="SoundDefType" />
      <xs:element name="RenderNodeProperties">
        <xs:annotation>
          <xs:documentation>Default: this.renderNodeProperties</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="PawnRenderNodePropertiesType" minOccurs="0"
              maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:choice> -->
  </xs:complexType>

  <!-- MotePropertiesType -->
  <xs:complexType name="MotePropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's MoteProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="realTime" type="xs:boolean" />
      <xs:element name="fadeInTime" type="xs:float" />
      <xs:element name="solidTime" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="fadeOutTime" type="xs:float" />
      <xs:element name="acceleration" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Vector3.zero</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="speedPerTime" type="xs:float" />
      <xs:element name="growthRate" type="xs:float" />
      <xs:element name="collide" type="xs:boolean" />
      <xs:element name="archHeight" type="xs:float" />
      <xs:element name="archDuration" type="xs:float" />
      <xs:element name="archStartOffset" type="xs:float" />
      <xs:element name="landSound" type="SoundDefType" />
      <xs:element name="unattachedDrawOffset" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Vector3.zero</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="attachedDrawOffset" type="xs:string" />
      <xs:element name="needsMaintenance" type="xs:boolean" />
      <xs:element name="rotateTowardsTarget" type="xs:boolean" />
      <xs:element name="rotateTowardsMoveDirection" type="xs:boolean" />
      <xs:element name="scaleToConnectTargets" type="xs:boolean" />
      <xs:element name="attachedToHead" type="xs:boolean" />
      <xs:element name="fadeOutUnmaintained" type="xs:boolean" />
      <xs:element name="updateOffsetToMatchTargetRotation" type="xs:boolean" />
      <xs:element name="yFightingOffsetScalar01" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="scalers">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="CurvedScalerType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="Lifespan" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: this.fadeInTime + this.solidTime + this.fadeOutTime</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- CurvedScalerType -->
  <xs:complexType name="CurvedScalerType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's CurvedScaler type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="curve" type="SimpleCurveType" />
      <xs:element name="axisMask" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Vector3.one</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="scaleAmt" type="xs:string" />
      <xs:element name="scaleTime" type="xs:string" />
    </xs:choice>
  </xs:complexType>

  <!-- PlantPropertiesType -->
  <xs:complexType name="PlantPropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's PlantProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="wildBiomes">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="PlantBiomeRecordType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="wildClusterRadius" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: -1</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="wildClusterWeight" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 15f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="wildOrder" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 2f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="wildEqualLocalDistribution" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="cavePlant" type="xs:boolean" />
      <xs:element name="cavePlantWeight" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="sowTags">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;string&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="sowWork" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 10f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="sowMinSkill" type="xs:integer" />
      <xs:element name="blockAdjacentSow" type="xs:boolean" />
      <xs:element name="sowResearchPrerequisites">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="ResearchProjectDefType" minOccurs="0"
              maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="mustBeWildToSow" type="xs:boolean" />
      <xs:element name="harvestWork" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 10f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="harvestYield" type="xs:float" />
      <xs:element name="harvestedThingDef" type="xs:string" />
      <xs:element name="harvestTag" type="xs:string" />
      <xs:element name="harvestMinGrowth" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 0.65f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="harvestAfterGrowth" type="xs:float" />
      <xs:element name="harvestFailable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="harvestYieldAffectedByDifficulty" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="soundHarvesting" type="SoundDefType" />
      <xs:element name="soundHarvestFinish" type="SoundDefType" />
      <xs:element name="autoHarvestable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="skipDeteriorationMessage" type="xs:boolean" />
      <xs:element name="growDays" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 2f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="lifespanDaysPerGrowDays" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 8f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="growMinGlow" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 0.51f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="growOptimalGlow" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="pollution" type="PollutionType" />
      <xs:element name="fertilityMin" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 0.9f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="fertilitySensitivity" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 0.5f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="dieIfLeafless" type="xs:boolean" />
      <xs:element name="neverBlightable" type="xs:boolean" />
      <xs:element name="interferesWithRoof" type="xs:boolean" />
      <xs:element name="dieIfNoSunlight" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="dieFromToxicFallout" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="purpose" type="PlantPurposeType">
        <xs:annotation>
          <xs:documentation>Default: PlantPurpose.Misc</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="humanFoodPlant" type="xs:boolean" />
      <xs:element name="treeLoversCareIfChopped" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="allowAutoCut" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="drugForHarvestPurposes" type="xs:boolean" />
      <xs:element name="treeCategory" type="TreeCategoryType" />
      <xs:element name="burnedThingDef" type="xs:string" />
      <xs:element name="choppedThingDef" type="xs:string" />
      <xs:element name="smashedThingDef" type="xs:string" />
      <xs:element name="canDeteriorate" type="xs:boolean" />
      <xs:element name="showGrowthInInspectPane" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="minSpacingBetweenSamePlant" type="xs:float" />
      <xs:element name="forceIsTree" type="xs:boolean" />
      <xs:element name="warnIfMarkedForCut" type="xs:boolean" />
      <xs:element name="isStump" type="xs:boolean" />
      <xs:element name="topWindExposure" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 0.25f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="maxMeshCount" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 1</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="visualSizeRange" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: new FloatRange(0.9f, 1.1f)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="leaflessGraphic" type="GraphicType" />
      <xs:element name="immatureGraphic" type="GraphicType" />
      <xs:element name="dropLeaves" type="xs:boolean" />
      <xs:element name="pollutedGraphic" type="GraphicType" />
      <xs:element name="Sowable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: !this.sowTags.NullOrEmpty&lt;string&gt;()</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Harvestable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: (double) this.harvestYield 1.0 / 1000.0</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="HarvestDestroys" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: (double) this.harvestAfterGrowth &lt;= 0.0</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="IsTree" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.harvestTag == "Wood" || this.forceIsTree</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="LifespanDays" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: this.growDays * this.lifespanDaysPerGrowDays</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="LifespanTicks" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: (int) ((double) this.LifespanDays * 60000.0)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="LimitedLifespan" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: (double) this.lifespanDaysPerGrowDays 0.0</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Blightable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.Sowable &amp;&amp; this.Harvestable &amp;&amp;
            !this.neverBlightable</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="GrowsInClusters" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.wildClusterRadius 0</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="RequiresPollution" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.pollution == Pollution.PollutedOnly</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="RequiresNoPollution" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.pollution == Pollution.CleanOnly</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- PlantBiomeRecordType -->
  <xs:complexType name="PlantBiomeRecordType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's PlantBiomeRecord type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="biome" type="xs:string" />
      <xs:element name="commonality" type="xs:float" />
    </xs:choice>
  </xs:complexType>

  <!-- ResearchProjectDefType -->
  <xs:complexType name="ResearchProjectDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's ResearchProjectDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
        <xs:extension base="DefType">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="baseCost" type="xs:float" />
            <xs:element name="prerequisites">
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="ResearchProjectDefType" minOccurs="0"
                    maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="hiddenPrerequisites">
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="ResearchProjectDefType" minOccurs="0"
                    maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="techLevel" type="TechLevelType" />
            <xs:element name="requiredByThis">
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="ResearchProjectDefType" minOccurs="0"
                    maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="requiredResearchBuilding" type="xs:string" />
            <xs:element name="requiredResearchFacilities">
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="tags">
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="ResearchProjectTagDefType" minOccurs="0"
                    maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="tab" type="ResearchTabDefType" />
            <xs:element name="researchViewX" type="xs:float">
              <xs:annotation>
                <xs:documentation>Default: 1f</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="researchViewY" type="xs:float">
              <xs:annotation>
                <xs:documentation>Default: 1f</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="discoveredLetterTitle" type="xs:string" />
            <xs:element name="discoveredLetterText" type="xs:string" />
            <xs:element name="discoveredLetterDisabledWhen" type="DifficultyConditionConfigType">
              <xs:annotation>
                <xs:documentation>Default: new DifficultyConditionConfig()</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="techprintCount" type="xs:integer" />
            <xs:element name="techprintCommonality" type="xs:float">
              <xs:annotation>
                <xs:documentation>Default: 1f</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="techprintMarketValue" type="xs:float">
              <xs:annotation>
                <xs:documentation>Default: 1000f</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="heldByFactionCategoryTags">
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="hideWhen" type="DifficultyConditionConfigType">
              <xs:annotation>
                <xs:documentation>Default: new DifficultyConditionConfig()</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="requiresMechanitor" type="xs:boolean" />
            <xs:element name="requiredAnalyzed">
              <xs:complexType>
                <xs:choice maxOccurs="unbounded">
                  <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
                </xs:choice>
              </xs:complexType>
            </xs:element>
            <xs:element name="recalculatePower" type="xs:boolean" />
            <xs:element name="knowledgeCategory" type="KnowledgeCategoryDefType" />
            <xs:element name="knowledgeCost" type="xs:float" />
            <xs:element name="teachConcept" type="ConceptDefType" />
            <xs:element name="generalRules" type="RulePackType" />
            <xs:element name="ResearchViewX" type="xs:float">
              <xs:annotation>
                <xs:documentation>Default: this.x</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="ResearchViewY" type="xs:float">
              <xs:annotation>
                <xs:documentation>Default: this.y</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="CostApparent" type="xs:float">
              <xs:annotation>
                <xs:documentation>Default: this.Cost *
                  this.CostFactor(Faction.OfPlayer.def.techLevel)</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="ProgressReal" type="xs:float">
              <xs:annotation>
                <xs:documentation>Default: Find.ResearchManager.GetProgress(this)</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="ProgressPercent" type="xs:float">
              <xs:annotation>
                <xs:documentation>Default: Mathf.Clamp01(this.ProgressReal / this.Cost)</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="IsFinished" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Default: (double) this.ProgressReal &gt;= (double)
    this.Cost</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="Cost" type="xs:float">
              <xs:annotation>
                <xs:documentation>Default: (double) this.baseCost &lt;= 0.0 ?
                  this.knowledgeCost : this.baseCost</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="Description" type="xs:string">
              <xs:annotation>
                <xs:documentation>Default: this.description</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="TechprintCount" type="xs:integer">
              <xs:annotation>
                <xs:documentation>Default: !ModLister.RoyaltyInstalled ? 0 :
                  this.techprintCount</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="TechprintsApplied" type="xs:integer">
              <xs:annotation>
                <xs:documentation>Default: Find.ResearchManager.GetTechprints(this)</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:extension>
      </xs:complexContent> -->
  </xs:complexType>

  <!-- ProjectilePropertiesType -->
  <xs:complexType name="ProjectilePropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's ProjectileProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="speed" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 5f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="flyOverhead" type="xs:boolean" />
      <xs:element name="alwaysFreeIntercept" type="xs:boolean" />
      <xs:element name="damageDef" type="DamageDefType" />
      <xs:element name="stoppingPower" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 0.5f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="extraDamages">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="ExtraDamageType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="arcHeightFactor" type="xs:float" />
      <xs:element name="shadowSize" type="xs:float" />
      <xs:element name="landedEffecter" type="EffecterDefType" />
      <xs:element name="spinRate" type="xs:float" />
      <xs:element name="useGraphicClass" type="xs:boolean" />
      <xs:element name="soundHitThickRoof" type="SoundDefType" />
      <xs:element name="soundExplode" type="SoundDefType" />
      <xs:element name="soundImpactAnticipate" type="SoundDefType" />
      <xs:element name="soundAmbient" type="SoundDefType" />
      <xs:element name="soundImpact" type="SoundDefType" />
      <xs:element name="explosionRadius" type="xs:float" />
      <xs:element name="explosionRadiusDisplayPadding" type="xs:float" />
      <xs:element name="explosionDelay" type="xs:integer" />
      <xs:element name="doExplosionVFX" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="preExplosionSpawnThingDef" type="xs:string" />
      <xs:element name="preExplosionSpawnChance" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="preExplosionSpawnThingCount" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 1</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="postExplosionSpawnThingDef" type="xs:string" />
      <xs:element name="postExplosionSpawnThingDefWater" type="xs:string" />
      <xs:element name="postExplosionSpawnChance" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="postExplosionSpawnThingCount" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 1</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="applyDamageToExplosionCellsNeighbors" type="xs:boolean" />
      <xs:element name="explosionChanceToStartFire" type="xs:float" />
      <xs:element name="explosionDamageFalloff" type="xs:boolean" />
      <xs:element name="screenShakeFactor" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="filth" type="xs:string" />
      <xs:element name="filthCount" type="xs:string" />
      <xs:element name="numExtraHitCells" type="xs:integer" />
      <xs:element name="bulletChanceToStartFire" type="xs:float" />
      <xs:element name="bulletFireSizeRange" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: new FloatRange(0.55f, 0.85f)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="explosionEffect" type="EffecterDefType" />
      <xs:element name="explosionEffectLifetimeTicks" type="xs:integer" />
      <xs:element name="spawnsThingDef" type="xs:string" />
      <xs:element name="tryAdjacentFreeSpaces" type="xs:boolean" />
      <xs:element name="ai_IsIncendiary" type="xs:boolean" />
      <xs:element name="SpeedTilesPerTick" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: this.speed / 100f</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- EffecterDefType -->
  <xs:complexType name="EffecterDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's EffecterDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="children">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="SubEffecterDefType" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="positionRadius" type="xs:float" />
          <xs:element name="offsetTowardsTarget" type="xs:string" />
          <xs:element name="maintainTicks" type="xs:integer" />
          <xs:element name="randomWeight" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: 1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="offsetMode" type="EffecterDef.OffsetModeType" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>

  <!-- OffsetModeType -->
  <xs:simpleType name="OffsetModeType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for OffsetMode.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="TrueCenterCompensated" />
      <xs:enumeration value="Free" />
    </xs:restriction>
  </xs:simpleType>

  <!-- StuffPropertiesType -->
  <xs:complexType name="StuffPropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's StuffProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="parent" type="xs:string" />
      <xs:element name="stuffAdjective" type="xs:string" />
      <xs:element name="commonality" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="categories">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;StuffCategoryDef&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="StuffCategoryDefType" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="allowedInStuffGeneration" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="statOffsets">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:any />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="statFactors">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:any />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="statOffsetsQuality">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="StatModifierQualityType" minOccurs="0"
              maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="statFactorsQuality">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="StatModifierQualityType" minOccurs="0"
              maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="color" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: new Color(0.8f, 0.8f, 0.8f)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="constructEffect" type="EffecterDefType" />
      <xs:element name="appearance" type="xs:string" />
      <xs:element name="allowColorGenerators" type="xs:boolean" />
      <xs:element name="canSuggestUseDefaultStuff" type="xs:boolean" />
      <xs:element name="soundImpactBullet" type="SoundDefType" />
      <xs:element name="soundImpactMelee" type="SoundDefType" />
      <xs:element name="soundMeleeHitSharp" type="SoundDefType" />
      <xs:element name="soundMeleeHitBlunt" type="SoundDefType" />
    </xs:choice>
  </xs:complexType>

  <!-- StuffCategoryDefType -->
  <xs:complexType name="StuffCategoryDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's StuffCategoryDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="noun" type="xs:string" />
          <xs:element name="destroySoundSmall" type="SoundDefType" />
          <xs:element name="destroySoundMedium" type="SoundDefType" />
          <xs:element name="destroySoundLarge" type="SoundDefType" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>

  <!-- SkyfallerPropertiesType -->
  <xs:complexType name="SkyfallerPropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's SkyfallerProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="hitRoof" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ticksToImpactRange" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: new IntRange(120, 200)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ticksToDiscardInReverse" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: IntRange.zero</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="reversed" type="xs:boolean" />
      <xs:element name="explosionRadius" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 3f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="explosionDamage" type="DamageDefType" />
      <xs:element name="damageSpawnedThings" type="xs:boolean" />
      <xs:element name="explosionDamageFactor" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="metalShrapnelCountRange" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: IntRange.zero</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="rubbleShrapnelCountRange" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: IntRange.zero</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="shrapnelDistanceFactor" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="movementType" type="SkyfallerMovementTypeType" />
      <xs:element name="speed" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 1f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="shadow" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: "Things/Skyfaller/SkyfallerShadowCircle"</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="shadowSize" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: Vector2.one</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="cameraShake" type="xs:float" />
      <xs:element name="impactSound" type="SoundDefType" />
      <xs:element name="rotateGraphicTowardsDirection" type="xs:boolean" />
      <xs:element name="anticipationSound" type="SoundDefType" />
      <xs:element name="floatingSound" type="SoundDefType" />
      <xs:element name="anticipationSoundTicks" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 100</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="motesPerCell" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: 3</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="moteSpawnTime" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: float.MinValue</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="xPositionCurve" type="SimpleCurveType" />
      <xs:element name="zPositionCurve" type="SimpleCurveType" />
      <xs:element name="angleCurve" type="SimpleCurveType" />
      <xs:element name="rotationCurve" type="SimpleCurveType" />
      <xs:element name="speedCurve" type="SimpleCurveType" />
      <xs:element name="fadeInTicks" type="xs:integer" />
      <xs:element name="fadeOutTicks" type="xs:integer" />
    </xs:choice>
  </xs:complexType>

  <!-- SkyfallerMovementTypeType -->
  <xs:simpleType name="SkyfallerMovementTypeType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for SkyfallerMovementType.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Accelerate" />
      <xs:enumeration value="ConstantSpeed" />
      <xs:enumeration value="Decelerate" />
    </xs:restriction>
  </xs:simpleType>

  <!-- PawnFlyerPropertiesType -->
  <xs:complexType name="PawnFlyerPropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's PawnFlyerProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="flightDurationMin" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 0.5f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="flightSpeed" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 12f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="heightFactor" type="xs:float">
        <xs:annotation>
          <xs:documentation>Default: 2f</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="stunDurationTicksRange" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: IntRange.zero</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- RitualFocusPropertiesType -->
  <xs:complexType name="RitualFocusPropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's RitualFocusProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="spectateDistance" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: new IntRange(2, 2)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="allowedSpectateSides" type="SpectateRectSideType">
        <xs:annotation>
          <xs:documentation>Default: SpectateRectSide.Horizontal</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="consumable" type="xs:boolean" />
    </xs:choice>
  </xs:complexType>

  <!-- SpectateRectSideType -->
  <xs:simpleType name="SpectateRectSideType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for SpectateRectSide.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="0" />
      <xs:enumeration value="Up" />
      <xs:enumeration value="1" />
      <xs:enumeration value="Right" />
      <xs:enumeration value="2" />
      <xs:enumeration value="Down" />
      <xs:enumeration value="4" />
      <xs:enumeration value="Left" />
      <xs:enumeration value="8" />
      <xs:enumeration value="Vertical" />
      <xs:enumeration value="Down" />
      <xs:enumeration value="Up" />
      <xs:enumeration value="Horizontal" />
      <xs:enumeration value="Left" />
      <xs:enumeration value="Right" />
      <xs:enumeration value="All" />
      <xs:enumeration value="Horizontal" />
      <xs:enumeration value="Vertical" />
    </xs:restriction>
  </xs:simpleType>

  <!-- IngredientPropertiesType -->
  <xs:complexType name="IngredientPropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's IngredientProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="mergeCompatibilityTags">
        <xs:annotation>
          <xs:documentation>Default: string[]</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- SkillRequirementType -->
  <xs:complexType name="SkillRequirementType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's SkillRequirement type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="skill" type="xs:string" />
      <xs:element name="minLevel" type="xs:integer" />
      <xs:element name="Summary" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: this.skill == null ? "" : $"{this.skill.LabelCap}
            ({this.minLevel})"</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- HoldOffsetSetType -->
  <xs:complexType name="HoldOffsetSetType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's HoldOffsetSet type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="northDefault" type="HoldOffsetType" />
      <xs:element name="east" type="HoldOffsetType" />
      <xs:element name="south" type="HoldOffsetType" />
      <xs:element name="west" type="HoldOffsetType" />
    </xs:choice>
  </xs:complexType>

  <!-- HoldOffsetType -->
  <xs:complexType name="HoldOffsetType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's HoldOffset type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="offset" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: new Vector3(-1000f, -1000f, -1000f)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="flip" type="xs:boolean" />
      <xs:element name="behind" type="xs:boolean" />
    </xs:choice>
  </xs:complexType>

  <!-- TerrainDefType -->
  <xs:complexType name="TerrainDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's TerrainDef type.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BuildableDefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="texturePath" type="xs:string" />
          <xs:element name="edgeType" type="xs:string" />
          <xs:element name="waterDepthShader" type="xs:string" />
          <xs:element name="waterDepthShaderParameters">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="_UseWaterOffset" type="xs:integer" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="renderPrecedence" type="xs:integer" />
          <xs:element name="affordances">
            <xs:annotation>
              <xs:documentation>Default: new List&lt;TerrainAffordanceDef&gt;()</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0"
                  maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="layerable" type="xs:boolean" />
          <xs:element name="scatterType" type="xs:string" />
          <xs:element name="takeFootprints" type="xs:boolean" />
          <xs:element name="natural" type="xs:boolean" />
          <xs:element name="takeSplashes" type="xs:boolean" />
          <xs:element name="avoidWander" type="xs:boolean" />
          <xs:element name="changeable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="smoothedTerrain" type="TerrainDefType" />
          <xs:element name="holdSnow" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: true</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="isPaintable" type="xs:boolean" />
          <xs:element name="extinguishesFire" type="xs:boolean" />
          <xs:element name="bridge" type="xs:boolean" />
          <xs:element name="color" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: Color.white</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="colorDef" type="xs:string" />
          <xs:element name="driesTo" type="TerrainDefType" />
          <xs:element name="tags">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="xs:string" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="burnedDef" type="TerrainDefType" />
          <xs:element name="tools">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="ToolType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="extraDeteriorationFactor" type="xs:float" />
          <xs:element name="destroyOnBombDamageThreshold" type="xs:float">
            <xs:annotation>
              <xs:documentation>Default: -1f</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="destroyBuildingsOnDestroyed" type="xs:boolean" />
          <xs:element name="traversedThought" type="ThoughtDefType" />
          <xs:element name="extraDraftedPerceivedPathCost" type="xs:integer" />
          <xs:element name="extraNonDraftedPerceivedPathCost" type="xs:integer" />
          <xs:element name="destroyEffect" type="EffecterDefType" />
          <xs:element name="destroyEffectWater" type="EffecterDefType" />
          <xs:element name="autoRebuildable" type="xs:boolean" />
          <xs:element name="categoryType" type="TerrainDef.TerrainCategoryTypeType" />
          <xs:element name="pollutedTexturePath" type="xs:string" />
          <xs:element name="pollutionOverlayTexturePath" type="xs:string" />
          <xs:element name="pollutionShaderType" type="xs:string" />
          <xs:element name="pollutionColor" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: Color.white</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="pollutionOverlayScrollSpeed" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: Vector2.zero</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="pollutionOverlayScale" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: Vector2.one</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="pollutionCloudColor" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: Color.white</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="pollutionTintColor" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: Color.white</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="generatedFilth" type="xs:string" />
          <xs:element name="filthAcceptanceMask" type="FilthSourceFlagsType">
            <xs:annotation>
              <xs:documentation>Default: FilthSourceFlags.Any</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="waterDepthMaterial" type="xs:string" />
          <xs:element name="graphicPolluted" type="GraphicType">
            <xs:annotation>
              <xs:documentation>Default: BaseContent.BadGraphic</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Removable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.layerable</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="DrawColor" type="xs:string">
            <xs:annotation>
              <xs:documentation>Default: this.colorDef != null ? this.colorDef.color : this.color</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsRiver" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.HasTag("River")</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsOcean" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.HasTag("Ocean")</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsWater" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.HasTag("Water")</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsFine" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.HasTag("FineFloor")</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsSoil" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.HasTag("Soil")</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsRoad" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.HasTag("Road")</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="IsFloor" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Default: this.HasTag("Floor")</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="TerrainEdgeTypeType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for TerrainEdgeType.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Hard" />
      <xs:enumeration value="Fade" />
      <xs:enumeration value="FadeRough" />
      <xs:enumeration value="Water" />
    </xs:restriction>
  </xs:simpleType>


  <!-- BuildingSizeCategoryType -->
  <xs:simpleType name="BuildingSizeCategoryType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for BuildingSizeCategory.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Small" />
      <xs:enumeration value="Medium" />
      <xs:enumeration value="Large" />
    </xs:restriction>
  </xs:simpleType>

  <!-- MechWeightClassType -->
  <xs:simpleType name="MechWeightClassType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for MechWeightClass.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Light" />
      <xs:enumeration value="Medium" />
      <xs:enumeration value="Heavy" />
      <xs:enumeration value="UltraHeavy" />
    </xs:restriction>
  </xs:simpleType>

  <!-- StorageSettingsType -->
  <xs:complexType name="StorageSettingsType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's StorageSettings type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="owner" type="xs:string" />
      <xs:element name="filter" type="ThingFilterType" />
    </xs:choice>
  </xs:complexType>

  <!-- ThingFilterType -->
  <xs:complexType name="ThingFilterType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's ThingFilter type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="hiddenSpecialFilters">
        <xs:annotation>
          <xs:documentation>Default: new List&lt;SpecialThingFilterDef&gt;()</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="li" type="xs:string" minOccurs="0"
              maxOccurs="unbounded" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="allowedHitPointsConfigurable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="allowedQualitiesConfigurable" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: true</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="customSummary" type="xs:string" />
      <xs:element name="OnlySpecialFilters" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Default: this.onlySpecialFilters</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AnyAllowedDef" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: this.allowedDefs.FirstOrDefault&lt;ThingDef&gt;()</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AllowedThingDefs">
        <xs:annotation>
          <xs:documentation>Default: (IEnumerable&lt;ThingDef&gt;) this.allowedDefs</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:any />
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="AllowedDefCount" type="xs:integer">
        <xs:annotation>
          <xs:documentation>Default: this.allowedDefs.Count</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- DamageArmorCategoryDefType -->
  <xs:complexType name="DamageArmorCategoryDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's DamageArmorCategoryDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="multStat" type="StatDefType" />
          <xs:element name="armorRatingStat" type="StatDefType" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>

  <!-- FillableBarRequestWithRotationType -->
  <xs:complexType name="FillableBarRequestWithRotationType">
    <xs:choice maxOccurs="unbounded">
      <xs:element name="north" type="GenDraw.FillableBarRequest">

      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- GenDraw.FillableBarRequest -->
  <xs:complexType name="GenDraw.FillableBarRequest">
    <xs:choice maxOccurs="unbounded">
      <xs:element name="preRotationOffset" type="xs:string" />
      <xs:element name="size" type="xs:string" />
    </xs:choice>
  </xs:complexType>

  <!-- MoteForRotationDataType -->
  <xs:complexType name="MoteForRotationDataType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's MoteForRotationData type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="north" type="xs:string" />
      <xs:element name="south" type="xs:string" />
      <xs:element name="east" type="xs:string" />
      <xs:element name="west" type="xs:string" />
    </xs:choice>
  </xs:complexType>

  <!-- DeathActionPropertiesType -->
  <xs:complexType name="DeathActionPropertiesType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's DeathActionProperties type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="workerClass" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: typeof (DeathActionWorker_Simple)</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- HediffGiverSetDefType -->
  <xs:complexType name="HediffGiverSetDefType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's HediffGiverSetDef type.</xs:documentation>
    </xs:annotation>
    <!-- <xs:complexContent>
      <xs:extension base="DefType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="hediffGivers">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded">
                <xs:element name="li" type="HediffGiverType" minOccurs="0" maxOccurs="unbounded" />
              </xs:choice>
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent> -->
  </xs:complexType>

  <!-- DetritusLeavingTypeType -->
  <xs:complexType name="DetritusLeavingTypeType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's DetritusLeavingType type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="def" type="xs:string" />
      <xs:element name="texOverrideIndex" type="xs:integer" />
      <xs:element name="spawnChance" type="xs:float" />
    </xs:choice>
  </xs:complexType>

  <!-- DeathActionWorkerType -->
  <xs:complexType name="DeathActionWorkerType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's DeathActionWorker type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="props" type="DeathActionPropertiesType" />
    </xs:choice>
  </xs:complexType>

  <!-- PollutionType -->
  <xs:simpleType name="PollutionType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for Pollution.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="CleanOnly" />
      <xs:enumeration value="PollutedOnly" />
      <xs:enumeration value="Any" />
    </xs:restriction>
  </xs:simpleType>

  <!-- PlantPurposeType -->
  <xs:simpleType name="PlantPurposeType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for PlantPurpose.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Food" />
      <xs:enumeration value="Health" />
      <xs:enumeration value="Beauty" />
      <xs:enumeration value="Misc" />
    </xs:restriction>
  </xs:simpleType>

  <!-- TreeCategoryType -->
  <xs:simpleType name="TreeCategoryType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for TreeCategory.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="None" />
      <xs:enumeration value="Mini" />
      <xs:enumeration value="Full" />
      <xs:enumeration value="Super" />
    </xs:restriction>
  </xs:simpleType>

  <!-- StatModifierQualityType -->
  <xs:complexType name="StatModifierQualityType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's StatModifierQuality type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="stat" type="xs:string" />
      <xs:element name="awful" type="xs:float" />
      <xs:element name="poor" type="xs:float" />
      <xs:element name="normal" type="xs:float" />
      <xs:element name="good" type="xs:float" />
      <xs:element name="excellent" type="xs:float" />
      <xs:element name="masterwork" type="xs:float" />
      <xs:element name="legendary" type="xs:float" />
    </xs:choice>
  </xs:complexType>

  <!-- TerrainDef.TerrainCategoryTypeType -->
  <xs:simpleType name="TerrainDef.TerrainCategoryTypeType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for TerrainCategoryType.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Misc" />
      <xs:enumeration value="Soil" />
      <xs:enumeration value="Stone" />
      <xs:enumeration value="Sand" />
    </xs:restriction>
  </xs:simpleType>

  <!-- TraversabilityType -->
  <xs:simpleType name="TraversabilityType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for Traversability.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Standable" />
      <xs:enumeration value="PassThroughOnly" />
      <xs:enumeration value="Impassable" />
    </xs:restriction>
  </xs:simpleType>

  <!-- CostListForDifficultyType -->
  <xs:complexType name="CostListForDifficultyType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's CostListForDifficulty type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="difficultyVar" type="xs:string" />
      <xs:element name="costList" type="GeneralAnyListType" />
      <xs:element name="costStuffCount" type="xs:integer" />
      <xs:element name="invert" type="xs:boolean" />
    </xs:choice>
  </xs:complexType>

  <!-- ThingDefCountClassType -->

  <!-- IconForStuffAppearanceType -->
  <xs:complexType name="IconForStuffAppearanceType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's IconForStuffAppearance type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="Appearance" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: this.appearance</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="IconPath" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: this.iconPath</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- AltitudeLayerType -->
  <xs:simpleType name="AltitudeLayerType">
    <xs:annotation>
      <xs:documentation>Enumeration of values for AltitudeLayer.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Terrain" />
      <xs:enumeration value="TerrainScatter" />
      <xs:enumeration value="Floor" />
      <xs:enumeration value="Conduits" />
      <xs:enumeration value="FloorCoverings" />
      <xs:enumeration value="FloorEmplacement" />
      <xs:enumeration value="Filth" />
      <xs:enumeration value="Zone" />
      <xs:enumeration value="SmallWire" />
      <xs:enumeration value="LowPlant" />
      <xs:enumeration value="MoteLow" />
      <xs:enumeration value="Shadows" />
      <xs:enumeration value="DoorMoveable" />
      <xs:enumeration value="Building" />
      <xs:enumeration value="BuildingBelowTop" />
      <xs:enumeration value="BuildingOnTop" />
      <xs:enumeration value="Item" />
      <xs:enumeration value="ItemImportant" />
      <xs:enumeration value="LayingPawn" />
      <xs:enumeration value="PawnRope" />
      <xs:enumeration value="Projectile" />
      <xs:enumeration value="Pawn" />
      <xs:enumeration value="PawnUnused" />
      <xs:enumeration value="PawnState" />
      <xs:enumeration value="Blueprint" />
      <xs:enumeration value="MoteOverheadLow" />
      <xs:enumeration value="MoteOverhead" />
      <xs:enumeration value="Gas" />
      <xs:enumeration value="Skyfaller" />
      <xs:enumeration value="Weather" />
      <xs:enumeration value="LightingOverlay" />
      <xs:enumeration value="VisEffects" />
      <xs:enumeration value="FogOfWar" />
      <xs:enumeration value="Darkness" />
      <xs:enumeration value="WorldClipper" />
      <xs:enumeration value="Silhouettes" />
      <xs:enumeration value="MapDataOverlay" />
      <xs:enumeration value="MetaOverlays" />
      <xs:enumeration value="_Count" />
    </xs:restriction>
  </xs:simpleType>

  <!-- DefModExtensionType -->
  <xs:complexType name="DefModExtensionType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's DefModExtension type.</xs:documentation>
    </xs:annotation>
  </xs:complexType>

  <!-- ColorForStuffType -->
  <xs:complexType name="ColorForStuffType">
    <xs:annotation>
      <xs:documentation>XML definition for RimWorld's ColorForStuff type.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="Stuff" type="ThingDefType">
        <xs:annotation>
          <xs:documentation>Default: this.stuff</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Color" type="xs:string">
        <xs:annotation>
          <xs:documentation>Default: this.color</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <!-- GeneralAnyListType -->
  <xs:complexType name="GeneralAnyListType">
    <xs:sequence>
      <xs:any processContents="lax" minOccurs="0" maxOccurs="unbounded" />
    </xs:sequence>
  </xs:complexType>
</xs:schema>